{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#the-python-framework-for-ai-data-artisans","title":"The Python Framework for AI &amp; Data Artisans","text":"<p>Arkalos is an easy-to-use framework for data analysis, data science, building data apps, warehouses, AI agents, robots, ML, training LLMs with elegant syntax. It just works.</p>"},{"location":"#why-arkalos-beginner-and-micro-business-friendly","title":"Why Arkalos? Beginner- and Micro Business-Friendly","text":"<p>Arkalos makes it easy to get started, whether you're a beginner non-coder, scientist, or AI engineer.</p> <p>And small businesses can now leverage the power of data warehouses and AI on a budget and at speed.</p> <p>No more struggling with:</p> <ul> <li>Setting up your environment</li> <li>Spending hours searching for basic solutions</li> <li>Following instructions that just don't work</li> <li>Manually installing and managing packages</li> <li>Writing too much code for basic tasks</li> <li>Resolving import issues and errors</li> <li>Figuring out how to structure custom code and modules</li> <li>Growing from Jupyter Notebooks to full AI apps and pipelines</li> <li>Connecting data sources and building data warehouses</li> <li>Training AI models and running LLMs locally</li> <li>Collaborating with teams or sharing code across devices</li> </ul> <p>The name Arkalos combines \"Arc\" and the Greek word \"Kalos,\" meaning \"a beautiful journey through the data.\"</p> <p></p>"},{"location":"#beautiful-syntax-and-documentation","title":"Beautiful Syntax and Documentation","text":"<p>Arkalos offers:</p> <ul> <li>Beautiful Documentation: Clear, concise, and easy-to-follow guides, even if you are learning coding, Python or data science.</li> <li>Elegant Syntax: Simple code that's easy to write and read.</li> <li>Reliable Performance: Works out of the box with minimal setup.</li> </ul> <pre><code>uv init\nuv add arkalos\nuv run arkalos init\n\n# That's it. Your workspace is ready to write code. It just works!\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p>\ud83d\ude80 Modern Python Workflow: Built with modern Python practices, libraries, and a package manager. Perfect for non-coders and AI engineers.</p> </li> <li> <p>\ud83d\udee0\ufe0f Hassle-Free Setup: No more struggling with environment setups, package installs, or import errors.</p> </li> <li> <p>\ud83e\udd1d Easy Collaboration &amp; Folder Structure: Share code across devices or with your team. Built-in workspace folder and file structure. Know where to put each file.</p> </li> <li> <p>\ud83d\udcd3 Jupyter Notebook Friendly: Start with a simple notebook and easily transition to scripts, full apps, or microservices.</p> </li> <li> <p>\ud83d\udd78\ufe0f Browser Automation &amp; Structured Web Crawling &amp; Scraping: Control a real browser to bypass auth and captchas, crawl dynamic websites, and extract structured data using simple annotations with CSS selectors, attributes, slices, and regex \u2014 no manual parsing needed.</p> </li> <li> <p>\ud83d\udcca Built-in Data Extractors &amp; Warehouse: Connect to Notion, Airtable, Google Drive, and more. Uses SQLite for a local, lightweight data warehouse.</p> </li> <li> <p>\ud83e\udd16 AI, LLM &amp; RAG Ready. Talk to Your Own Data: Train AI models, run LLMs, and build AI and RAG pipelines locally. Fully open-source and compliant. Built-in AI agent helps you to talk to your own data in natural language.</p> </li> <li> <p>\ud83d\udc1e Debugging and Logging Made Easy: Built-in utilities and Python extensions like <code>var_dump()</code> for quick variable inspection, <code>dd()</code> to halt code execution, and pre-configured logging for notices and errors.</p> </li> <li> <p>\ud83e\udde9 Extensible Architecture: Easily extend Arkalos components and inject your own dependencies with a modern, modular software design.</p> </li> <li> <p>\ud83d\udd17 Seamless Microservices: Deploy your own data or AI microservice like ChatGPT without the need to use external APIs to integrate with your existing platforms effortlessly.</p> </li> <li> <p>\ud83d\udd12 Data Privacy &amp; Compliance First: Run everything locally with full control. No need to send sensitive data to third parties. Fully open-source under the MIT license, and perfect for organizations needing data governance.</p> </li> </ul>"},{"location":"#truly-open-source-local-and-compliant","title":"Truly Open-Source, Local, and Compliant","text":"<p>Arkalos helps individuals and businesses analyze data securely, with everything running locally and fully compliant with regulations.</p>"},{"location":"#free-built-in-data-warehouse-and-integrations","title":"Free Built-In Data Warehouse and Integrations","text":"<p>Data warehouses are centralized repositories that connect multiple data sources to enable AI and analytics.</p> <p>Not every case needs complex and expensive tools like Snowflake or BigQuery. With Arkalos, you get a simple, local data warehouse right out of the box!</p> <p>Arkalos connects seamlessly to popular tools like Notion, Airtable, Google Drive, and HubSpot.</p> <p>Automatically detects and generates the schema.</p> <p>And syncs data into your own data warehouse.</p> config/data_sources.py<pre><code>    'airtable': {\n        'enabled': True,\n        'api_key': env('AIRTABLE_API_KEY'),\n        'base_id': env('AIRTABLE_BASE_ID'),\n        'tables': env('AIRTABLE_TABLES'),\n    }\n</code></pre> <p>SQLite is used as the default local data warehouse.</p> .env<pre><code>DWH_ENGINE=SQLite\nDWH_SCHEMA_PATH=data/dwh/schema.sql\nDWH_SQLITE_PATH=data/dwh/dwh.db\n</code></pre> <pre><code>uv run arkalos dwh sync\n</code></pre> scripts/etl/my_script.py<pre><code>from arkalos.data.extractors.airtable_extractor import AirtableExtractor\n# or for Notion\n# from arkalos.data.extractors.notion_extractor import NotionExtractor\nfrom arkalos.workflows.etl_workflow import ETLWorkflow\n\nwf = ETLWorkflow(AirtableExtractor)\nwf.run(drop_tables=True)\n</code></pre> <p>And that's it! Your data is imported automatically, ready for analysis or AI pipelines, and even accessible offline.</p>"},{"location":"#built-in-http-api-server-launch-a-python-data-or-ai-microservice","title":"Built-in HTTP API Server - Launch a Python Data or AI Microservice","text":"<p>Python is the world's fastest-growing programming language thanks to its rich ecosystem of data, AI, and scientific libraries.</p> <p>Arkalos lets freelancers, consultants, startups, businesses, and even governments add powerful data and AI capabilities to their products and platforms. Simply launch Arkalos as a microservice and integrate it seamlessly into your architecture.</p> <pre><code>uv run arkalos serve\n</code></pre>"},{"location":"#build-custom-ai-agents-without-abstraction","title":"Build Custom AI Agents Without Abstraction","text":"app/ai/actions/what_is_my_ip_action.py<pre><code>import socket\nfrom arkalos.ai import AIAction\n\nclass WhatIsMyIpAction(AIAction):\n\n    NAME = 'what_is_my_ip'\n    DESCRIPTION = 'Determine the user IP'\n\n    def run(self, message):\n        hostname = socket.gethostname()\n        ip = socket.gethostbyname(hostname)\n        return ip\n</code></pre> app/ai/actions/calc_action.py<pre><code>from arkalos.ai import AIAction\n\nclass CalcAction(AIAction):\n\n    NAME = 'calc'\n    DESCRIPTION = 'Calculate mathematical expressions and provide a single value'\n\n    def run(self, message):\n        prompt = f\"\"\"\n            ### Instructions:\n            You are a calculator. Calculate mathematical expression and provide an answer\n\n            ### Input:\n            Generate a proper mathematical formula based on this question `{message}`.\n\n            And calculate the final answer to this formula.\n\n            ### Response:\n            Respond as a single mathematical value to the expression\n        \"\"\"\n        return self.generateTextResponse(prompt)\n</code></pre>"},{"location":"#multi-task-agent-determine-which-action-to-take","title":"Multi-Task Agent - Determine Which Action to Take","text":"app/ai/agents/multi_agent.py<pre><code>from arkalos.ai import AIAgent, TextToSQLAction\n\nfrom app.ai.actions import WhatIsMyIpAction, CalcAction\n\n\n\nclass MultiAgent(AIAgent):\n\n    NAME = 'MultiAgent'\n\n    DESCRIPTION = 'An Agent that understands the intent, determines which task to perform and runs it.'\n\n    GREETING = 'Hi, I am a MultiAgent. I can tell your IP address, do basic math calculations or transform text to SQL.'\n\n    ACTIONS = [\n        WhatIsMyIpAction, \n        CalcAction, \n        TextToSQLAction\n    ]\n\n    def processMessage(self, message):\n        response = f\"Determining the intent and which task to run...\\n\"\n        which_action = self.whichAction(message)\n        response += f\"Based on your question, I determined this task: {which_action}\\n\"\n        response += f\"Running this task...\\n\"\n        output = self.runAction(which_action, message)\n        response += f\"Task output: {output}\\n\"\n        return response\n</code></pre>"},{"location":"#test-your-models-and-agents-locally","title":"Test Your Models and Agents Locally","text":"scripts/ai/agent.py<pre><code>from app.ai.agents import MultiAgent\n\nagent = MultiAgent()\nagent.runConsole()\n</code></pre> <pre><code>uv run scripts/ai/agent.py\n</code></pre>"},{"location":"#web-browser-automation-crawling-and-scraping","title":"Web Browser Automation, Crawling and Scraping","text":"notebooks/browser.ipynb<pre><code>from arkalos.browser import WebBrowser, WebBrowserTab\n\nbrowser = WebBrowser(WebBrowser.TYPE.REMOTE_CDP)\n\nasync def search_google(tab: WebBrowserTab):\n    await tab.goto('https://www.google.com')\n    search_input = tab.get_by_role('combobox', name='Search')\n    await search_input.click()\n    await search_input.fill('cats')\n    await search_input.press('Enter')\n    images_tab = tab.get_by_role('link', name='Images', exact=True)\n    await images_tab.click()\n\nawait browser.run(search_google)\n</code></pre> app/data/extractors/my_website_web_extractor.py<pre><code>from arkalos.data.extractors import WebExtractor, WebDetails, _\nfrom dataclasses import dataclass\nimport polars as pl\n\n@dataclass\nclass ArticleDetails(WebDetails):\n    CONTAINER = 'article[data-id]'\n\n    id: _[str, None, 'data-id']           # Attribute from container\n    url: _[str, 'a', 'href']              # Link\n    title: _[str, 'a']                    # Text from &lt;a&gt;\n    description: _[str, '[data-item=\"description\"]']\n    tags: _[list[str], '[data-item=\"tag\"]']\n    rating: _[int, '.rating', 1]          # Second child (after image)\n\nclass MyWebsiteWebExtractor(WebExtractor):\n    BASE_URL = 'https://mywebsite.com'\n    PAGE_CONTENT_SELECTOR = 'main'\n    SCROLL = True\n    DETAILS = ArticleDetails\n\n    async def crawlTechArticles(self):\n        return await self.crawlSpecificDetails(['/category/tech'])\n</code></pre> notebooks/my_web_crawler.ipynb<pre><code>from app.data.extractors.my_website_web_extractor import MyWebsiteWebExtractor\n\nmywebsite = MyWebsiteWebExtractor()\ndata = await mywebsite.crawlTechArticles()\n\ndf = pl.DataFrame(data)\ndf\n</code></pre>"},{"location":"#powerful-google-extractor","title":"Powerful Google Extractor","text":""},{"location":"#search-and-list-google-drive-files-spreadsheets-and-forms","title":"Search and List Google Drive Files, Spreadsheets and Forms","text":"<pre><code>import polars as pl\n\nfrom arkalos.utils import MimeType\nfrom arkalos.data.extractors import GoogleExtractor\n\ngoogle = GoogleExtractor()\n\nfolder_id = 'folder_id'\n\n# List files and their metadata in a Google Drive folder\nfiles = google.drive.listFiles(folder_id)\n\n# Search for files with regex and by type\nfiles = google.drive.listFiles(folder_id, name_pattern='report', file_types=[MimeType.DOC_PDF])\n\nprint(pl.DataFrame(files))\n</code></pre>"},{"location":"#list-all-the-spreadsheets-recursively-with-their-tabs-sheets-info","title":"List All the Spreadsheets Recursively With Their Tabs (Sheets) Info","text":"<pre><code>files = google.drive.listSpreadsheets(folder_id, name_pattern='report', recursive_depth=1, with_meta=True, do_print=True)\n\nfor file in files:\n    google.drive.downloadFile(file['id'], do_print=True)\n</code></pre>"},{"location":"#download-export-files-and-spreadsheets-or-google-form-responses","title":"Download, Export Files and Spreadsheets or Google Form Responses","text":"<pre><code>google.drive.getFormMetadata(form_id)\n\ngoogle.drive.getFormResponses(form_id)\n\ngoogle.drive.getFormQuestions(form_id)\n\n# Export Google Form responses as CSV\ngoogle.drive.downloadFile(form_id)\n\n# Export Google Spreadsheet as LibreOffice Calc\ngoogle.drive.downloadFile(spreadsheet_id, 'my_folder/spreadsheet_name', as_mime_type=MimeType.SHEET_LIBRE_CALC)\n</code></pre>"},{"location":"#get-data-from-google-analytics-4","title":"Get Data from Google Analytics 4","text":"<pre><code># Past 28 days (minus 2 days of delay)\nstart_date = (datetime.now() - timedelta(days=29)).strftime('%Y-%m-%d')\nend_date = (datetime.now() - timedelta(days=2)).strftime('%Y-%m-%d')\n\nprops = google.analytics.listProperties()\n\nproperty_id = 'property_id'\n\ngoogle.analytics.fetchPages(property_id, start_date, end_date)\n\ngoogle.analytics.fetchTrafficStats(property_id, start_date, end_date)\n\ngoogle.analytics.fetchInternalSiteSearch(property_id, start_date, end_date)\n</code></pre>"},{"location":"#and-from-google-search-console-gsc","title":"And From Google Search Console (GSC)","text":"<pre><code>google.analytics.listGSCSites()\n\nsite = 'sc-domain:arkalos.com'\n\ngoogle.analytics.fetchTopGSCPages(site, start_date, end_date)\n\nqueries = google.analytics.fetchTopGSCQueries(site, start_date, end_date)\n\n# Sort by a built-in CTR Opportunity Score\npl.Config(tbl_rows=100)\npl.DataFrame(queries).select(pl.exclude('site', 'page_url', 'page_path')).sort('ctr_os', descending=True)\n\n# Fetch top pages first and then their top queries (Page-first)\ngoogle.analytics.fetchTopGSCPagesThenQueries(site, start_date, end_date)\n\n# Query-first\ngoogle.analytics.fetchTopGSCQueriesThenPages(site, start_date, end_date)\n\n# Or as sections, instead of a single table\ngoogle.analytics.fetchTopGSCPagesThenQueries(site, start_date, end_date, with_sections=True)\n</code></pre>"},{"location":"#beautiful-documentation-get-started-today","title":"Beautiful Documentation - Get Started Today","text":"<p>Read the Documentation</p>"},{"location":"#appreciations","title":"Appreciations","text":"<p>We are grateful to the communities behind these open-source projects on which we depend.</p>"},{"location":"#license","title":"License","text":"<p>MIT License.</p> <p>Check the LICENSE file for answers to common questions.</p>"},{"location":"appreciations/","title":"Appreciations","text":"<p>We are grateful to our community, sponsors, partners and friends, especially ATHENNO Corporation and Yinson Holdings Bhd.</p> <p>We are grateful to Taylor Otwell, Laravel, PHP and Node.js communities for some inspirations.</p> <p>We are grateful to the communities behind these open-source projects on which we depend:</p> <p>Core:</p> <ul> <li>Python language</li> <li>uv package manager</li> <li>Ollama</li> <li>Jupyter Notebook</li> </ul> <p>Core Python Libraries, Data &amp; Stats:</p> <ul> <li>python-dotenv</li> <li>numpy</li> <li>pandas</li> <li>polars</li> <li>datasets</li> <li>scipy</li> <li>nltk</li> <li>arrow</li> </ul> <p>ML/AI &amp; Models:</p> <ul> <li>scikit-learn</li> <li>PyTorch</li> <li>Transformers by Hugging Face</li> <li>Ollama</li> <li>qwen2.5-coder and qwen-based models</li> <li>DeepSeek-based models</li> </ul> <p>Data Visualization:</p> <ul> <li>matplotlib</li> <li>seaborn</li> <li>altair</li> </ul> <p>Web, HTTP &amp; Text Parsing:</p> <ul> <li>requests</li> <li>lxml</li> <li>beautifulsoup4</li> <li>playwright</li> <li>markdownify</li> <li>FastAPI</li> <li>uvicorn</li> </ul> <p>Dev, IDE, Data Generation &amp; Testing:</p> <ul> <li>pytest</li> <li>ipykernel</li> <li>mypy</li> <li>pydantic</li> <li>faker</li> </ul> <p>Clients &amp; APIs:</p> <ul> <li>google-api-python-client</li> </ul> <p>Typing:</p> <ul> <li>types-requests</li> <li>google-api-python-client-stubs</li> <li>lxml-stubs</li> <li>types-beautifulsoup4</li> </ul> <p>Documentation:</p> <ul> <li>mkdocs</li> <li>mkdocs-material</li> </ul>"},{"location":"contact/","title":"Contact or Follow Us and Join the Community","text":"<p>Arkalos is an independent open-source community project, not affiliated with any corporation.</p>"},{"location":"contact/#contact-follow","title":"Contact &amp; Follow","text":"<p>Creator &amp; Project Lead - Mev-Rael</p>"},{"location":"contact/#join-the-community-and-ask-questions","title":"Join the Community and Ask Questions","text":"<p>Join the Arkalos Community on X</p>"},{"location":"contact/#star-us-on-github-and-contribute","title":"Star Us on GitHub and Contribute","text":"<p>Arkalos GitHub repository</p>"},{"location":"legal/","title":"Legal &amp; License","text":"<p>Arkalos is licensed under the MIT license.</p>"},{"location":"legal/#the-project","title":"The Project:","text":"<p>Project \"Arkalos\" Copyright (c) Mev-Rael Anno 2025</p> <p>The primary purpose of Arkalos is to provide a universal Python framework that allows all individuals and entities to study, teach, develop, execute, or commercialize their projects, which are not limited to, but include: notebooks, scripts, data pipelines, ML workflows, AI agents, data apps, platforms, data warehouses, and the training of models, including LLMs.</p>"},{"location":"legal/#the-mit-license-mit","title":"The MIT License (MIT):","text":"<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"legal/#mit-faq-annotation","title":"MIT FAQ &amp; Annotation:","text":"<p>The MIT License, established by the MIT in the late 1980s, is a permissive software license designed to facilitate free use, modification, sharing, and commercialization of software. Its primary goal is to foster collaboration and innovation by minimizing barriers to code reuse while ensuring proper attribution to authors and creators through the inclusion of the original copyright notice and license in any redistributions.</p> <p>Distribution means delivering software or part of it to end-users via various means, including physical media, online platforms, cloud services, app stores and virtual environments.</p> <p>If you develop a product that diverges from the original purpose of this software (e.g., a mobile app, SaaS platform, or custom software for monetization), you MUST only acknowledge the original author(s) by mentioning the software's name at the end of your legal documents (e.g., privacy policy, terms of service), in a dedicated section such as \"About\", \"Appreciations\" or \"Acknowledgments,\" or in other placements such as the website footer or a statement like: \"We are grateful to the communities behind these open-source projects on which we depend: [list software names or link to a dedicated page with this list].\" Optionally, include the author(s) and a link to the public repository for full license details. You do not have to disclose anything further or make your code public.</p> <p>Conversely, if you fork or create public derivative works based on the original software, you MUST retain the MIT License and include it along with the original copyright notice and this annotation.</p>"},{"location":"docs/ai-actions/","title":"AI Actions","text":"<p>AI Actions or Tasks are actions that AI Agents can perform. Some tasks are simple, like getting basic information, while others use AI models or external tools to process data.</p> <p>Arkalos provides built-in tasks like converting natural language to SQL, querying a data warehouse, and displaying data.</p> <p>Tasks are essential building blocks \u2014 without them, an AI Agent can't do anything.</p>"},{"location":"docs/ai-actions/#creating-an-action","title":"Creating an Action","text":"<p>Let's create two actions:</p> <ol> <li>Basic Action: Find the user's IP address.</li> <li>AI-Powered Action: A natural language calculator.</li> </ol>"},{"location":"docs/ai-actions/#basic-action-what-is-my-ip","title":"Basic Action: What is My IP","text":"<p>Create a new file: <code>app/ai/actions/what_is_my_ip_action.py</code></p> app/ai/tasks/what_is_my_ip_action.py<pre><code>import socket\nfrom arkalos.ai import AIAction\n\nclass WhatIsMyIpAction(AIAction):\n\n    NAME = 'what_is_my_ip'\n    DESCRIPTION = 'Get the user's IP address.'\n\n    def run(self, message):\n        hostname = socket.gethostname()\n        return socket.gethostbyname(hostname)\n</code></pre> <p>Every AI Action in Arkalos must implement the <code>AIAction</code> contract and three key properties/methods:</p> <ul> <li><code>NAME</code>: A unique name for the action.</li> <li><code>DESCRIPTION</code>: A clear and descriptive explanation of what the action does. Other actions and AI Agents can use this information to determine if the task is capable of processing a certain input.</li> <li><code>run(message)</code>: The main function that processes input and returns a result. We don't use user's input in this example.</li> </ul>"},{"location":"docs/ai-actions/#ai-action-natural-language-calculator","title":"AI Action: Natural Language Calculator","text":"<p>Create a new file: <code>app/ai/actions/calc_action.py</code></p> app/ai/tasks/calc_action.py<pre><code>from arkalos.ai import AIAction\n\nclass CalcTask(AIAction):\n\n    NAME = 'calc'\n    DESCRIPTION = 'Solve mathematical expressions from natural language.'\n\n    def run(self, message):\n        prompt = f\"\"\"\n            ### Instructions:\n            You are a calculator. Solve the following expression:\n\n            ### Input:\n            `{message}`\n\n            ### Response:\n            Return only the final numerical result.\n        \"\"\"\n        return self.generateTextResponse(prompt)\n</code></pre> <p>This action uses an AI model to process user input, generate a math formula, and return a single calculated value.</p> <p>The response time depends on your computer's CPU, RAM, GPU, and the AI model set in the <code>.env</code> file.</p>"},{"location":"docs/ai-actions/#using-actions-in-an-agent","title":"Using Actions in an Agent","text":"<p>Now that we have actions, let\u2019s add them to an AI Agent! Learn how here \u2192</p>"},{"location":"docs/ai-agents/","title":"AI Agents","text":"<p>AI Agents are intelligent controllers that connect different tasks, process user input, and generate meaningful responses. They act like a human assistant.</p> <p>They can operate in different environments, such as a command-line console, a web browser, a virtual gaming world or simulation, or even a real physical world like robots and autonomous vehicles.</p> <p>Arkalos includes built-in AI Agents like <code>DWHAgent</code>, which allows users to interact with their data using natural language.</p> <p>Let's create our own AI Agent.</p>"},{"location":"docs/ai-agents/#creating-an-ai-agent","title":"Creating an AI Agent","text":"<p>To create an agent, implement the <code>AIAgent</code> contract and define the following methods:</p> <ul> <li><code>NAME</code>: A unique name for the agent.</li> <li><code>DESCRIPTION</code>: A brief explanation of what the agent does.</li> <li><code>GREETING</code>: Initial greeting message from the agent to the user.</li> <li><code>ACTIONS</code>: List of actions an agent can take.</li> <li><code>processMessage(message)</code>: The method that processes user input and runs actions.</li> </ul> <p>Note</p> <p>The AI Agent's <code>processMessage(message)</code> method expects a markdown-formatted string and returns a response as plain text or markdown. Using markdown enables frontend formatting for user-agent communication.</p>"},{"location":"docs/ai-agents/#example-simple-calculator-agent","title":"Example: Simple Calculator Agent","text":"<p>Create a new file: <code>app/ai/agents/my_agent.py</code></p> <pre><code>from arkalos.ai import AIAgent\nfrom app.ai.tasks.calc_action import CalcAction\n\nclass MyAgent(AIAgent):\n\n    NAME = 'MyAgent'\n\n    DESCRIPTION = 'A calculator agent.'\n\n    GREETING = 'Hi, I am a calculator. What do you want to calculate?'\n\n    ACTIONS = [\n        CalcAction\n    ]\n\n    def processMessage(self, message):\n        output = self.runAction(CalcAction, message)\n        return output\n</code></pre>"},{"location":"docs/ai-agents/#running-the-agent","title":"Running the Agent","text":"<p>Create a script and run the agent:</p> scripts/ai/my_agent.py<pre><code>from app.ai.agents.my_agent import MyAgent\n\nagent = MyAgent()\nagent.runConsole()\n</code></pre> <p>Run the script:</p> <pre><code>uv run scripts/ai/my_agent.py\n</code></pre>"},{"location":"docs/ai-agents/#multi-action-ai-agent","title":"Multi-Action AI Agent","text":"<p>A multi-task agent can determine user intent and execute the appropriate action.</p> <p>Arkalos includes a <code>whichAction()</code> method that uses AI to identify the correct task from the list of registered tasks.</p>"},{"location":"docs/ai-agents/#example-multi-task-ai-agent","title":"Example: Multi-Task AI Agent","text":"<pre><code>from arkalos.ai import AIAgent\nfrom app.ai.tasks.calc_action import CalcAction\nfrom app.ai.tasks.what_is_my_ip_action import WhatIsMyIpAction\n\nclass MultiAgent(AIAgent):\n\n    NAME = 'MultiAgent'\n\n    DESCRIPTION = 'An Agent that understands the intent, determines which task to perform and runs it.'\n\n    GREETING = 'Hi, I am a MultiAgent. I can tell your IP address, do basic math calculations or transform text to SQL.'\n\n    ACTIONS = [\n        WhatIsMyIpAction, \n        CalcAction, \n        TextToSQLAction\n    ]\n\n    def processMessage(self, message):\n        response = f\"Determining the intent and which task to run...\\n\"\n        which_action = self.whichAction(message)\n        response += f\"Based on your question, I determined this task: {which_action}\\n\"\n        response += f\"Running this task...\\n\"\n        output = self.runAction(which_action, message)\n        response += f\"Task output: {output}\\n\"\n        return response\n</code></pre> <p>Here, <code>whichAction()</code> determines the right task based on user input.</p> <p>Now, you can create AI Agents that handle multiple tasks efficiently!</p>"},{"location":"docs/ai-eval/","title":"AI Eval","text":"<p>Note</p> <p>Coming Soon! Follow us and join the community</p>"},{"location":"docs/ai-models/","title":"Training a Model","text":"<p>Note</p> <p>Coming Soon! Follow us and join the community</p>"},{"location":"docs/app/","title":"App and Modules","text":"<p>Writing app code is more than just coding \u2014 it's a mindset. It\u2019s about designing code that\u2019s easy to grow, share, reuse and maintain.</p> <p>When you're writing Code to Run, like a notebook for quick data analysis or migration, you focus on getting the task done. But when writing Code to Reuse, you need to design it so it\u2019s easy for you and others \u2014 like your teammates, teachers, managers, or professors \u2014 to integrate into scripts and notebooks.</p> <p>Reusable code should avoid direct outputs like <code>print()</code> or charts. Instead, return values that can be used elsewhere. For example, if you generate a chart, consider returning it as an encoded string, making it flexible for various uses.</p> <p>Think of reusable code like Lego blocks \u2014 modular pieces that fit together seamlessly.</p>"},{"location":"docs/app/#modules-and-packages","title":"Modules and Packages","text":"<p>In Python, app code revolves around two key concepts: Modules and Packages.</p>"},{"location":"docs/app/#creating-modules","title":"Creating Modules","text":"<p>A module is any Python file (<code>.py</code>) that contains definitions \u2014 functions, classes, or constants \u2014 that you can import into scripts or notebooks.</p> <p>Previously, we created this module:</p> app/utils/my_utils.py<pre><code>from arkalos import config\n\ndef greet(greeting: str) -&gt; None:\n    print(f\"{greeting}, {config('app.name')}\")\n</code></pre> <p>Now we can rewrite it to follow the Code to Reuse mindset:</p> app/utils/my_utils.py<pre><code>from arkalos import config\n\ndef greet(greeting: str) -&gt; str:\n    return f\"{greeting}, {config('app.name')}\"\n</code></pre> <p>Notice how <code>greet()</code> now returns a string instead of printing it. This makes the function more versatile. You can print the result if needed:</p> <pre><code>print(greet('Hi'))\n</code></pre> <p>Or compose it with other functions:</p> app/utils/my_utils.py<pre><code>from arkalos import config\n\ndef greet(greeting: str) -&gt; str:\n    return f\"{greeting}, {config('app.name')}\"\n\ndef bye(hello_message: str, goodbye_message: str) -&gt; str:\n    return f\"{hello_message}. {goodbye_message}\"\n</code></pre> <p>Now, use these in a notebook:</p> notebooks/my_notebook.ipynb<pre><code>from app.utils.my_utils import greet, bye\n\nprint(bye(greet('Hi'), 'Goodbye!'))\n# Output: Hi, &lt;your app name&gt;. Goodbye!\n</code></pre> <p>By designing functions to return values, you make them flexible building blocks for larger workflows.</p>"},{"location":"docs/app/#creating-packages","title":"Creating Packages","text":"<p>A package is a folder containing modules and an optional <code>__init__.py</code> file. The <code>__init__.py</code> file helps organize imports, making it easier to access functions.</p> <p>For example, let\u2019s create a package:</p> <ol> <li> <p>Create the folder structure:</p> <pre><code>app/utils/my_package/\n    __init__.py\n    module_one.py\n    module_two.py\n</code></pre> </li> <li> <p>Add functions to the modules:</p> app/utils/my_package/module_one.py<pre><code>def add(a: int, b: int) -&gt; int:\n    return a + b\n\ndef subtract(a: int, b: int) -&gt; int:\n    return a - b\n</code></pre> app/utils/my_package/module_two.py<pre><code>def multiply(a: int, b: int) -&gt; int:\n    return a * b\n\ndef divide(a: int, b: int) -&gt; float:\n    return a / b\n</code></pre> </li> <li> <p>Organize imports in <code>__init__.py</code>:</p> app/utils/my_package/__init__.py<pre><code>from app.utils.my_package.module_one import add, subtract\nfrom app.utils.my_package.module_two import multiply, divide\n</code></pre> </li> </ol> <p>Now, you can import the whole package easily:</p> notebooks/my_notebook.ipynb<pre><code>from arkalos import var_dump\nimport app.utils.my_package as my_package\n\nvar_dump(my_package.add(5, 3))       # Output: int(8)\nvar_dump(my_package.divide(10, 2))   # Output: float(5.0)\n</code></pre> <p>No need to import each module individually \u2014 your package handles that for you!</p> <p>Note</p> <p>External packages (installed via <code>uv add &lt;package&gt;</code>) are more complex and aren\u2019t covered here. Publishing your own external packages involves additional steps like using a <code>src/</code> folder and registering with PyPI.</p>"},{"location":"docs/app/#functions-vs-classes","title":"Functions vs Classes","text":""},{"location":"docs/app/#when-to-use-functions","title":"When to Use Functions","text":"<p>Start with functions for simple, reusable tasks. Good functions:</p> <ul> <li>Take simple inputs</li> <li>Return simple outputs</li> <li>Do one thing well</li> <li>Avoid side effects (don\u2019t modify external states)</li> </ul> <p>Keep functions short and focused.</p>"},{"location":"docs/app/#when-to-use-classes","title":"When to Use Classes","text":"<p>Use classes when you need to define custom data types or enforce structure in your code.</p>"},{"location":"docs/app/#classes-for-custom-data-types","title":"Classes for Custom Data Types","text":"<p>If you need to represent a structured data, use the <code>@dataclass</code> decorator.</p> <p>A Python decorator is like a magical spell you can put on a function or a class to change how it works without changing the function itself. A decorator is like adding a honking device to the car without touching its engine!</p> <p>A dataclass decorator is like a special kind of toy box where you can put different toys (data) in an organized way.</p> app/data/types/point.py<pre><code>from dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x: int\n    y: int\n</code></pre> notebooks/my_notebook.ipynb<pre><code>from arkalos import var_dump\n\nfrom app.data.types.point import Point\n\nmy_point = Point(3, 5)\nvar_dump(my_point)\n</code></pre> <p>This defines a custom <code>Point</code> data type.</p> <p>You can pass data in this format as arguments of functions across your workflows.</p>"},{"location":"docs/app/#classes-for-contracts-interfaces","title":"Classes for Contracts (Interfaces)","text":"<p>To enforce a consistent structure, use abstract classes as contracts (also called interfaces).</p> app/utils/greeter.py<pre><code>from abc import ABC, abstractmethod\n\nclass Greeter(ABC):\n    @abstractmethod\n    def myAction(self, greeting: str) -&gt; str:\n        pass\n</code></pre> <p><code>Greeter</code> is an abstract base class. It defines the method <code>myAction</code>, but doesn\u2019t implement it.</p> <p>Now, implement this contract in a concrete class:</p> app/utils/my_greeter.py<pre><code>from app.utils.greeter import Greeter\n\nclass MyGreeter(Greeter):\n    def myAction(self, greeting: str) -&gt; str:\n        return f\"{greeting}, from MyGreeter!\"\n</code></pre> <p>And use it in your notebook:</p> notebooks/my_notebook.ipynb<pre><code>from app.utils.my_greeter import MyGreeter\n\ngreeter = MyGreeter()\nprint(greeter.myAction('Hello'))\n# Output: Hello, from MyGreeter!\n</code></pre> <p>Using abstract classes ensures that everyone on your team follows the same structure, making your codebase more consistent and easier to maintain.</p>"},{"location":"docs/app/#what-next","title":"What Next","text":"<p>Now that you know how to structure your app code with modules, packages, functions, and classes, you\u2019re set to build reusable, maintainable Python projects and learn about Working as a Team</p>"},{"location":"docs/browser/","title":"Python Browser Automation","text":""},{"location":"docs/browser/#configuration","title":"Configuration","text":"<p>Arkalos makes it easy to automate the web using a real browser. You can use it for scraping, crawling, or saving web pages as Markdown. It\u2019s built on top of Microsoft\u2019s Playwright engine \u2014 a modern and fast automation library that supports all major browsers.</p> <p>Playwright works by controlling a real browser (like Edge or Chrome), either in a headless mode (without UI) or with a visible window. It follows web standards and provides a powerful and clean API, like <code>query_selector_all()</code> to get multiple elements from the page.</p> <p>You can use Arkalos to:</p> <ul> <li>Automate your browser while you're logged in</li> <li>Interact with dynamic websites</li> <li>Extract specific data</li> <li>Scroll pages like a real user</li> </ul> <p>Before using browser features, make sure to install Playwright\u2019s browsers and system dependencies:</p> <p>Note</p> <p>Chrome and Edge will be installed globally and might overwrite your current browser installation. If you already have them installed, you can install only specific browsers. If you are inside WSL or server, install all of them.</p> VS Code terminal - inside the Arkalos project<pre><code>playwright install --with-deps\n</code></pre> <p>If you don\u2019t have the Playwright Python module yet, add it to your project:</p> <pre><code>uv add playwright\n</code></pre>"},{"location":"docs/browser/#for-windows-and-wsl-users","title":"For Windows and WSL Users","text":"<p>If you're using WSL (Windows Subsystem for Linux), Playwright may not be able to connect to your browser running in Windows. You might see timeout errors when launching a browser.</p> <p>To fix this, switch WSL's networking mode to mirrored, which lets your WSL environment access services running on Windows.</p> <p>Follow these steps:</p> <ol> <li>Create a <code>.wslconfig</code> file in your Windows user directory (e.g., <code>C:\\Users\\YourUsername</code>)</li> <li> <p>Add this content: C:\\Users\\YourUsername\\.wslconfig<pre><code>[wsl2]\nnetworkingMode=mirrored\n</code></pre></p> </li> <li> <p>Close all running VS Code and WSL terminals.</p> </li> <li> <p>Restart WSL from the Windows Terminal (Admin): <pre><code>wsl --shutdown\n</code></pre></p> </li> <li> <p>Reopen VS Code and your project inside WSL.</p> </li> <li>Verify that WSL is using the mirrored networking mode: <pre><code>wslinfo --wsl-version\nwslinfo --networking-mode\n</code></pre></li> </ol>"},{"location":"docs/browser/#connecting-to-and-automating-your-real-browser","title":"Connecting to and Automating Your Real Browser","text":"<p>Sometimes, you want to automate a live browser that's already running, for example to:</p> <ul> <li>Skip login steps</li> <li>Avoid CAPTCHAs</li> <li>Access pages where you're already authenticated</li> </ul> <p>Arkalos supports this by connecting to browsers using the Chromium DevTools Protocol (CDP)\u2014a remote debugging protocol supported by Edge and Chrome.</p> <p>Note</p> <p>Only Chromium-based browsers like Chrome or Edge support CDP.</p>"},{"location":"docs/browser/#launching-your-browser-in-cdp-mode","title":"Launching Your Browser in CDP Mode","text":"<p>To enable CDP, you need to start your browser with a special flag that opens a remote debugging port.</p> <p>On Windows:</p> Windows Terminal (Admin)<pre><code>start msedge --remote-debugging-port=9222\n\n# or Chrome\nstart chrome --remote-debugging-port=9222\n</code></pre> <p>On macOS:</p> Mac Terminal<pre><code>sudo /Applications/Microsoft\\ Edge.app/Contents/MacOS/Microsoft\\ Edge --remote-debugging-port=9222\n\n# or Chrome\nsudo /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222\n</code></pre>"},{"location":"docs/browser/#creating-a-webbrowser-and-running-an-action","title":"Creating a WebBrowser and Running an Action","text":"<p>Once your browser is running in CDP mode and you're logged in, you can connect to it using Arkalos.</p> <p>Use the <code>WebBrowser</code> class to launch or connect to a browser. By default, it creates a headless Edge browser. To connect to your live browser, use <code>REMOTE_CDP</code> type.</p> <p>Available browser types are defined inside <code>WebBrowser.TYPE</code>:</p> <ul> <li><code>REMOTE_CDP</code> \u2013 Connects to a running Chrome/Edge instance</li> <li><code>EDGE_HEADLESS</code> (default)  </li> <li><code>EDGE_UI</code> </li> <li><code>CHROME_HEADLESS</code> </li> <li><code>CHROME_UI</code> </li> <li><code>FIREFOX_HEADLESS</code> </li> <li><code>FIREFOX_UI</code> </li> <li><code>SAFARI_HEADLESS</code> </li> <li><code>SAFARI_UI</code> </li> </ul> notebooks/my_live_browser_automation.ipynb<pre><code>from arkalos.browser import WebBrowser, WebBrowserTab\n\nbrowser = WebBrowser(WebBrowser.TYPE.REMOTE_CDP)\n\nasync def search_google(tab: WebBrowserTab):\n    await tab.goto('https://www.google.com')\n    search_input = tab.get_by_role('combobox', name='Search')\n    await search_input.click()\n    await search_input.fill('cats')\n    await search_input.press('Enter')\n    images_tab = tab.get_by_role('link', name='Images', exact=True)\n    await images_tab.click()\n\nawait browser.run(search_google)\n</code></pre> <p>Note</p> <p>Arkalos uses async/await syntax. If you're working in a Jupyter notebook, you can use <code>await</code> directly. For regular Python scripts, wrap it with <code>asyncio.run()</code>.</p> <p>This example will open your real browser and run a search on Google, just like a user would.</p> <p>You can pass more arguments to the <code>run()</code> callback and return data from it. The <code>tab</code> parameter gives you full control of the browser page.</p>"},{"location":"docs/browser/#impersonation","title":"Impersonation","text":"<p>When you create a <code>WebBrowser</code>, Arkalos automatically sets:</p> <ul> <li>Correct headers</li> <li>User agent strings</li> <li>Browser behaviors</li> </ul> <p>This helps you avoid detection or errors when interacting with modern websites.</p>"},{"location":"docs/browser/#testing-headers-user-agent-ip-and-cookies","title":"Testing Headers, User Agent, IP, and Cookies","text":"<p>To debug or inspect what your browser is sending, use this utility:</p> notebooks/browser.ipynb<pre><code>test = await WebBrowser().testHeadersCookiesIP()\nheaders = test['headers']\ncookies = test['cookies']\nip = test['origin']\n</code></pre> <p>This tells you:</p> <ul> <li>What headers are being sent</li> <li>The cookies stored</li> <li>Your current IP address</li> </ul> <p>Useful for testing VPNs, proxies, or impersonation setup.</p>"},{"location":"docs/browser/#scrolling","title":"Scrolling","text":"<p>Many modern websites load content as you scroll. Arkalos supports smooth, human-like scrolling with <code>WebBrowser.scroll(tab)</code>.</p> <p>Use it inside your automation callback:</p> notebooks/browser.ipynb<pre><code>async def handle_page(tab: WebBrowserTab):\n    WebBrowser.scroll(tab)\n    ...\n</code></pre> <p>This helps trigger lazy-loaded content or infinite scroll.</p>"},{"location":"docs/con-google/","title":"Python Google Extractor API","text":""},{"location":"docs/con-google/#create-a-google-oauth-key","title":"Create a Google OAuth Key","text":"<p>(1)</p> <p>Create a new Google Cloud Console project, e.g. \"My Drive\"</p> <p>(2)</p> <p>Open \"APIs &amp; Services\", find and enable these APIs:</p> <ul> <li>Google Drive API</li> <li>Google Sheets API </li> <li>Google Forms API</li> <li>Google Search Console API </li> <li>Google Analytics Admin API</li> <li>Google Analytics Data API </li> </ul> <p>(3)</p> <p>Setup OAuth consent screen and select User Type = Internal.</p> <p>Enter your gmail into User support email, Developer contact information and/or Testing Users.</p> <p>Into any Domain, URL, Authorized JavaScript origins, redirect URIs, etc, enter - http://localhost</p> <p>(4)</p> <p>Go to \"Credentials\" and create new credentials for OAuth client ID.</p> <p>Select Application type - Desktop app, and provide a name for your app, e.g. \"My Personal Drive Desktop OAuth\"</p> <p>A pop-up will display your Client ID and Client Secret. Download them as a JSON file by clicking Download JSON.</p> <p>(5)</p> <p>Rename the file as <code>google_oauth.json</code> and put it into <code>data/keys/</code> folder.</p>"},{"location":"docs/con-google/#examples","title":"Examples","text":"<p>Create a new notebook and try the GoogleExtractor out!</p> <p>In the first cell, create a GoogleExtractor.</p> <pre><code>import polars as pl\n\nfrom arkalos.utils import MimeType\nfrom arkalos.data.extractors import GoogleExtractor\n\ngoogle = GoogleExtractor()\n</code></pre> <p>Run a cell. It will output a link for you to open in the browser.</p> <p>Enable all scopes.</p> <p>New <code>data/tokens/google_access_token.json</code> file will be then created. Next time authorization won't be required.</p> <p>If you need to change scopes or update the token - delete this file.</p>"},{"location":"docs/con-google/#search-and-list-google-drive-files-spreadsheets-and-forms","title":"Search and List Google Drive Files, Spreadsheets and Forms","text":"<pre><code>folder_id = 'folder_id'\n\n# List files and their metadata in a Google Drive folder\nfiles = google.drive.listFiles(folder_id)\n\n# Search for files with regex and by type\nfiles = google.drive.listFiles(folder_id, name_pattern='report', file_types=[MimeType.DOC_PDF])\n\nprint(pl.DataFrame(files))\n</code></pre>"},{"location":"docs/con-google/#list-all-the-spreadsheets-recursively-with-their-tabs-sheets-info","title":"List All the Spreadsheets Recursively With Their Tabs (Sheets) Info","text":"<pre><code>files = google.drive.listSpreadsheets(folder_id, name_pattern='report', recursive_depth=1, with_meta=True, do_print=True)\n\nfor file in files:\n    google.drive.downloadFile(file['id'], do_print=True)\n</code></pre>"},{"location":"docs/con-google/#download-export-files-and-spreadsheets-or-google-form-responses","title":"Download, Export Files and Spreadsheets or Google Form Responses","text":"<pre><code>google.drive.getFormMetadata(form_id)\n\ngoogle.drive.getFormResponses(form_id)\n\ngoogle.drive.getFormQuestions(form_id)\n\n# Export Google Form responses as CSV\ngoogle.drive.downloadFile(form_id)\n\n# Export Google Spreadsheet as LibreOffice Calc\ngoogle.drive.downloadFile(spreadsheet_id, 'my_folder/spreadsheet_name', as_mime_type=MimeType.SHEET_LIBRE_CALC)\n</code></pre>"},{"location":"docs/con-google/#get-data-from-google-analytics-4","title":"Get Data from Google Analytics 4","text":"<pre><code># Past 28 days (minus 2 days of delay)\nstart_date = (datetime.now() - timedelta(days=29)).strftime('%Y-%m-%d')\nend_date = (datetime.now() - timedelta(days=2)).strftime('%Y-%m-%d')\n\nprops = google.analytics.listProperties()\n\nproperty_id = 'property_id'\n\ngoogle.analytics.fetchPages(property_id, start_date, end_date)\n\ngoogle.analytics.fetchTrafficStats(property_id, start_date, end_date)\n\ngoogle.analytics.fetchInternalSiteSearch(property_id, start_date, end_date)\n</code></pre>"},{"location":"docs/con-google/#and-from-google-search-console-gsc","title":"And From Google Search Console (GSC)","text":"<pre><code>google.analytics.listGSCSites()\n\nsite = 'sc-domain:arkalos.com'\n\ngoogle.analytics.fetchTopGSCPages(site, start_date, end_date)\n\nqueries = google.analytics.fetchTopGSCQueries(site, start_date, end_date)\n\n# Sort by a built-in CTR Opportunity Score\npl.Config(tbl_rows=100)\npl.DataFrame(queries).select(pl.exclude('site', 'page_url', 'page_path')).sort('ctr_os', descending=True)\n\n# Fetch top pages first and then their top queries (Page-first)\ngoogle.analytics.fetchTopGSCPagesThenQueries(site, start_date, end_date)\n\n# Query-first\ngoogle.analytics.fetchTopGSCQueriesThenPages(site, start_date, end_date)\n\n# Or as sections, instead of a single table\ngoogle.analytics.fetchTopGSCPagesThenQueries(site, start_date, end_date, with_sections=True)\n</code></pre>"},{"location":"docs/configuration/","title":"Configuration and Environment Setup","text":"<p>Arkalos uses environment variables and configuration files to manage settings across your entire app and any workflow, script or notebook.</p> <p>You can get env variables via <code>env('KEY')</code> function.</p> <p>Or config settings via <code>config('config_file.key')</code>.</p>"},{"location":"docs/configuration/#environment-variables-env","title":"Environment Variables (<code>.env</code>)","text":"<p>When you start an Arkalos project, you'll notice two environment files:</p> <ol> <li>.env.example - A template file with sample environment variables.</li> <li>.env - Your actual configuration file, which is gitignored to prevent sensitive data from being committed to version control.</li> </ol> <p>Whenever you add a new custom env variable, add an empty or default value to the <code>.env.example</code> as well so your team would know about them.</p>"},{"location":"docs/configuration/#why-use-environment-variables","title":"Why Use Environment Variables?","text":"<p>Environment variables allow you to:</p> <ul> <li>Secure sensitive data like API keys, database credentials, and tokens.</li> <li>Easily switch between environments, such as local development and production servers, by changing the settings in your <code>.env</code> file.</li> <li>Collaborate with teams without sharing sensitive credentials \u2014 team members can use the <code>.env.example</code> file as a reference.</li> </ul>"},{"location":"docs/configuration/#example-env-file","title":"Example <code>.env</code> File","text":"<pre><code># - MAIN / APP -\nAPP_NAME=My App\nAPP_ENV=local\nAPP_KEY=generated automatically\n\n# - DATA WAREHOUSE -\nDWH_ENGINE=SQLite\nDWH_SCHEMA_PATH=data/dwh/schema.sql\nDWH_SQLITE_PATH=data/dwh/dwh.db\n# DWH_HOST=127.0.0.1\n# DWH_PORT=3306\n# DWH_DATABASE=warehouse\n# DWH_USERNAME=root\n# DWH_PASSWORD=\n\n# - LLM (Models available on Ollama) -\nLLM=qwen2.5-coder\n# LLM=deepseek-r1:1.5b\n# LLM=deepseek-r1:7b\n\n# - DATA SOURCES (CONNECTORS / EXTRACTORS) -\nAIRTABLE_API_KEY=\nAIRTABLE_BASE_ID=\nAIRTABLE_TABLES='[\n    {\"id\": \"\", \"name\": \"\"},\n]'\n\nGOOGLE_SERVICE_ACCOUNT_KEY_PATH=data/keys/gdrive.json\nGOOGLE_SPREADSHEETS=\n\nNOTION_API_SECRET=\nNOTION_DATABASES=\n\nMONDAY_API_KEY=\nMONDAY_TABLES=\n\nHUBSPOT_API_KEY=\n\n# - LLM &amp; AI API KEYS -\nDEEPSEEK_API_KEY=\n\nOPENAI_API_KEY=\n</code></pre> <p>Note</p> <p>Some environment variables contain JSON strings. Make sure:</p> <ul> <li>The JSON is valid.</li> <li>Use single quotes around the entire string and double quotes inside the JSON.</li> <li>Pay attention to commas: no trailing commas after the last item.</li> </ul>"},{"location":"docs/configuration/#configuration-files","title":"Configuration Files","text":"<p>Arkalos uses Python-based configuration files stored in the <code>config/</code> folder. Unlike traditional text-based config files (like <code>.json</code> or <code>.yaml</code>), Python config files allow you to:</p> <ul> <li>Use functions and logic inside the configuration.</li> <li>Dynamically load environment variables using the <code>env()</code> function.</li> </ul>"},{"location":"docs/configuration/#available-config-files","title":"Available Config Files","text":"<ol> <li>config/app.py - General app settings.</li> <li>config/data_sources.py - Configurations for data connectors (Airtable, Google Sheets, etc.).</li> <li>config/data_warehouse.py - Data warehouse settings (SQLite, PostgreSQL, etc.).</li> </ol>"},{"location":"docs/configuration/#example-configurations","title":"Example Configurations","text":""},{"location":"docs/configuration/#configapppy","title":"<code>config/app.py</code>","text":"<pre><code>from arkalos import env\n\nconfig = {\n    'name': env('APP_NAME', 'Arkalos App'),\n    'env': env('APP_ENV', 'production'),\n    'llm': env('LLM', 'qwen2.5-coder'),\n    'debug': env('APP_DEBUG', False),\n}\n</code></pre>"},{"location":"docs/configuration/#configdata_sourcespy","title":"<code>config/data_sources.py</code>","text":"<pre><code>from arkalos import env\n\nconfig = {\n    'airtable': {\n        'enabled': False,\n        'api_key': env('AIRTABLE_API_KEY'),\n        'base_id': env('AIRTABLE_BASE_ID'),\n        'tables': env('AIRTABLE_TABLES'),\n    },\n    'google': {\n        'enabled': False,\n        'service_account_key_path': env('GOOGLE_SERVICE_ACCOUNT_KEY_PATH'),\n        'spreadsheets': env('GOOGLE_SPREADSHEETS'),\n        'id_col': 'id',\n        'updated_at_col': 'updated_at'\n    },\n    'hubspot': {\n        'enabled': False,\n        'api_key': env('HUBSPOT_API_KEY'),\n        'objects': ['contacts', 'companies', 'deals'],\n    },\n    'monday': {\n        'enabled': False,\n        'api_key': env('MONDAY_API_KEY'),\n        'databases': env('MONDAY_DATABASES'),\n    },\n    'notion': {\n        'enabled': False,\n        'api_secret': env('NOTION_API_SECRET'),\n        'databases': env('NOTION_DATABASES'),\n    },\n}\n</code></pre>"},{"location":"docs/configuration/#configdata_warehousepy","title":"<code>config/data_warehouse.py</code>","text":"<pre><code>from arkalos import env\n\nconfig = {\n    'engine': env('DWH_ENGINE', 'sqlite'),\n    'schema_path': env('DWH_SCHEMA_PATH', 'data/dwh/dwh.sql'),\n    'sync_frequency': '1h',\n\n    # SQLite\n    'path': env('DWH_SQLITE_PATH', 'data/dwh.db'),\n\n    # PostgreSQL, etc.\n    'host': env('DWH_HOST', '127.0.0.1'),\n    'port': env('DWH_PORT', '3306'),\n    'database': env('DWH_DATABASE', 'warehouse'),\n    'username': env('DWH_USERNAME', 'root'),\n    'password': env('DWH_PASSWORD', ''),\n\n    'engines': {\n        'sqlite': {},\n        # 'postgresql': {},\n        # 'bigquery': {},\n        # 'snowflake': {}\n    }\n}\n</code></pre>"},{"location":"docs/configuration/#creating-a-new-configuration-file","title":"Creating a New Configuration File","text":"<p>To add a new config file:</p> <ol> <li>Create a new Python file in the <code>config/</code> folder (e.g., <code>config/new_config.py</code>).</li> <li>Add the following structure:</li> </ol> <pre><code>from arkalos import env\n\nconfig = {\n    'key_name': env('ENV_VARIABLE', 'default_value'),\n    # Add more configurations here\n}\n</code></pre> <p>Now, your new configuration is ready to be used in your project.</p> <p>You can access it via <code>config('new_config.key_name')</code></p>"},{"location":"docs/configuration/#default-language-model-llm","title":"Default Language Model (LLM)","text":"<p>Choose which language model your app will use by default by specifying its name in the <code>.env</code> file:</p> <pre><code>LLM=qwen2.5-coder\n</code></pre> <p>If you followed previous installation guide, the <code>qwen2.5-coder</code> model from Ollama should already be set up on your system. This lightweight model works smoothly on a typical laptop or server with at least 8\u202fGB of RAM. It\u2019s good enough for basic chatting or generating code snippets.</p> <p>If your machine is more powerful (especially with a high-end GPU), feel free to switch to a larger model by simply changing the model name in your configuration. And when moving to production, we recommend using an enterprise server or cloud services with sufficient memory and GPU.</p>"},{"location":"docs/configuration/#data-sources-extractors-and-connectors","title":"Data Sources, Extractors and Connectors","text":"<p>Arkalos currently supports these providers out of the box:</p> <ul> <li>Notion (databases only)</li> <li>Airtable (tables)</li> </ul> <p>Google Drive, Monday.com, HubSpot and others are comming soon.</p> <p>For other data sources, You can create your own implementation by using the <code>DataExtractor</code> contract.</p>"},{"location":"docs/configuration/#notion","title":"Notion","text":"<p>Create a new Integration and API Secret by following the Notion guide.</p> <p>You must be an Owner or Admin of the workspace. Select your workspace and select type: Internal. Generate and copy a new secret into <code>.env</code> file.</p> .env (this is an example, not a valid real secret)<pre><code>NOTION_API_SECRET=ntn_3465436gigtw87wq4yNwugKGrhwefeiw7gtwogcyt\n</code></pre> <p>Now open a Notion database as a separate page that you wish to sync into your warehouse. For practice, you can create a new workspace and use the default Project and Tasks template. Copy the ID for each database you wish to sync. You can find the ID in the URL right after the domain:</p> <p>notion.so/<code>158a035340380c5a990dgfgwejfwef</code>?v=35g3k3tk4333yh3hy34996b</p> <p>Update the <code>.env</code> file and enter a new JSON row. Make sure there is no comma after the last item. Copy the ID and provide a name for each database. It can be any name you wish. Arkalos Data Warehouse will create a new table for each data source as <code>&lt;source_name&gt;__&lt;table_name&gt;</code>, e.g., <code>Notion__Tasks</code>.</p> .env<pre><code>NOTION_API_SECRET=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\nNOTION_DATABASES='[\n    {\"id\": \"158a035340380c5a990dgfgwejfwef\", \"name\": \"Tasks\"},\n    {\"id\": \"159a035340380c5a990dgfgwejfwef\", \"name\": \"Projects\"}\n]'\n</code></pre> <p>Finally, enable your integration on EACH database page.</p> <p>In the top right corner, from the \"...\" menu, select Connections and then search for and enable your new integration.</p>"},{"location":"docs/configuration/#airtable","title":"Airtable","text":"<p>In Airtable, under your user menu in the top right corner, open Builder Hub.</p> <p>Create a new Personal Access Token. Type any name for your integration. Select these two scopes:</p> <ul> <li><code>data.records:read</code></li> <li><code>schema.bases:read</code></li> </ul> <p>Under Access, select your Airtable workspace and save the token into <code>.env</code>. For practice, you may use Airtable AI App builder to generate a new app and tables with some data.</p> .env<pre><code>AIRTABLE_API_KEY=patHglggwgel.93IGLi5feih64da9c37853256gi75e4072d24353452g5ge\n</code></pre> <p>Open your workspace and copy the Base ID as well. It starts with \"app...\" and you can find it right after the domain:</p> <p>airtable.com/<code>appgJGkGY65KYrjf6fK</code>/tblhj3hk796wolwe7/viw5tuGutk8t6l</p> .env<pre><code>AIRTABLE_BASE_ID=appgJGkGY65KYrjf6fK\n</code></pre> <p>Finally, update the <code>.env</code> file and enter a new JSON row. Make sure there is no comma after the last item. Copy the ID and provide a name for each table from the URL (starts with \"tbl...\"). It can be any name you wish. Arkalos Data Warehouse will create a new table for each data source as <code>&lt;source_name&gt;__&lt;table_name&gt;</code>, e.g., <code>Airtable__Tasks</code>.</p> <p>airtable.com/appgJGkGY65KYrjf6fK/<code>tblhj3hk796wolwe7</code>/viw5tuGutk8t6l</p> .env<pre><code>AIRTABLE_TABLES='[\n    {\"id\": \"tblhj3hk796wolwe7\", \"name\": \"Tasks\"},\n    {\"id\": \"tblwj3hk796wolwe7\", \"name\": \"Projects\"}\n]'\n</code></pre>"},{"location":"docs/configuration/#data-warehouse","title":"Data Warehouse","text":"<p>Universal settings:</p> .env<pre><code>DWH_SCHEMA_PATH=data/dwh/schema.sql\n</code></pre> <ul> <li><code>DWH_SCHEMA_PATH</code>: Arkalos automatically generates and updates this file. It contains the SQL structure of your data. For example, when a new data source is synced into the warehouse, Arkalos infers the schema (data structure) automatically by analyzing the first rows of the incoming data.</li> </ul> <p>Engine-specific settings:</p> <p>Currently, only the SQLite engine is supported out of the box.</p> .env<pre><code>DWH_ENGINE=SQLite\nDWH_SQLITE_PATH=data/dwh/dwh.db\n</code></pre> <p>You can create your own implementation by using the <code>DataWarehouse</code> contract.</p> <p>You can access the data warehouse from any part of your notebook, script, or application:</p> <pre><code>from arkalos import dwh\n\ndwh().connect()\n</code></pre>"},{"location":"docs/configuration/#lets-write-our-first-arkalos-code","title":"Let's Write Our First Arkalos Code!","text":"<p>That's it! You have completed the Getting Started guide and are ready to write some code!</p>"},{"location":"docs/data-analyzers/","title":"Data Analyzers","text":"<p>Note</p> <p>Coming Soon! Follow us and join the community</p>"},{"location":"docs/data-sources/","title":"Data Sources","text":"<p>Note</p> <p>Coming Soon! Follow us and join the community</p>"},{"location":"docs/data-transformers/","title":"Data Transformers","text":"<p>Note</p> <p>Coming Soon! Follow us and join the community</p>"},{"location":"docs/data-visualizers/","title":"Data Visualizers","text":"<p>Note</p> <p>Coming Soon! Follow us and join the community</p>"},{"location":"docs/data-warehouse/","title":"Data Warehouse","text":"<p>Note</p> <p>Coming Soon! Follow us and join the community</p>"},{"location":"docs/installation/","title":"Installation","text":"<p>Note</p> <p>Arkalos is in Beta, where the code may change or break without notice. Not all documentation and modules are complete. Use it only for experimentation, study, and practice, not for production use. Follow us and join the community to stay updated.</p>"},{"location":"docs/installation/#requirements","title":"Requirements","text":"<ul> <li>Git</li> <li>Python &gt; 3.13</li> <li>Python <code>uv</code> package manager &gt; 0.5.29</li> <li>Ollama - for downloading, running, and building LLMs locally.</li> <li>IDE - like VS Code</li> <li>Just basic coding skills. You don't have to know math, stats, ML/AI to use core Arkalos features.</li> </ul>"},{"location":"docs/installation/#for-windows-users","title":"For Windows Users","text":"<p>If you're on Windows, we recommend using Windows Subsystem for Linux (WSL).</p> <p>Check out Microsoft's installation guide.</p>"},{"location":"docs/installation/#git","title":"Git","text":"<p>You likely have Git installed already.</p> <p>If not, follow GitHub's Installing Git guide.</p> <p>To verify installation:</p> <pre><code>git --version\n</code></pre>"},{"location":"docs/installation/#uv-package-manager","title":"UV Package Manager","text":"<p><code>uv</code> is a modern, super-fast Python package and project manager.</p> <p>If you've used NodeJS (npm) or PHP (Composer), it's similar.</p> <ul> <li><code>pyproject.toml</code> is like <code>package.json</code>.</li> <li>Use commands like <code>uv add &lt;package&gt;</code> or <code>uv sync</code> to manage dependencies.</li> </ul> <p>To install <code>uv</code>:</p> Mac, WSL, and LinuxWindows <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <pre><code>powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <p>For more details, see the uv documentation.</p> <p>To verify installation:</p> <pre><code>uv -V\n</code></pre>"},{"location":"docs/installation/#python","title":"Python","text":"<p>Download and install the latest Python version from the official site.</p> <p>Alternatively, use <code>uv</code> to install Python:</p> <pre><code>uv python install\n</code></pre> <p>To verify installation:</p> <pre><code>python -V\n</code></pre>"},{"location":"docs/installation/#installing-ollama-and-open-source-ai-models","title":"Installing Ollama and Open-Source AI Models","text":"<p>Ollama is a sleek, user-friendly app, CLI, framework, and repository for managing open-source LLMs locally.</p> <p>Download and install Ollama.</p> <p>To verify installation:</p> <pre><code>ollama -v\n</code></pre> <p>For more details, CLI commands, and RAM requirements, visit the Ollama GitHub repository.</p> <p>Once installed, open a new terminal and start the Ollama server:</p> <pre><code>ollama serve\n</code></pre> <p>Now, you can download various open-source LLMs like DeepSeek, Llama, Mistral, and Gemma.</p> <p>Open a new terminal and download your preferred model. Smaller models (~5GB) will take some time.</p> <p>You'll need at least 8GB of RAM for 7B models.</p> <p>Arkalos includes a basic AI Agent \u2014 a terminal chatbot to interact with your data warehouse.</p> <p>We recommend downloading the qwen-2.5-coder model (7B by default) while continuing with this guide:</p> <pre><code>ollama pull qwen2.5-coder\n</code></pre>"},{"location":"docs/installation/#recommended-vs-code-settings-and-extensions","title":"Recommended VS Code Settings and Extensions","text":"<p>We suggest using VS Code as your IDE because:</p> <ul> <li>It supports Jupyter Notebooks and other extensions.</li> <li>It includes a copilot.</li> <li>For Windows and WSL users, it simplifies working inside WSL.</li> </ul> <p>Download and install VS Code.</p>"},{"location":"docs/installation/#install-extensions","title":"Install Extensions:","text":"<p>From the Extensions side tab, search for and install:</p> <p>Official Microsoft Extensions:</p> <ul> <li>Python</li> <li>Python Debugger</li> <li>Pylance</li> <li>Data Wrangler</li> <li>Mypy Type Checker</li> <li>isort</li> <li>Jupyter (and extension packs)</li> <li>WSL (for Windows + WSL users)</li> </ul> <p>Other Recommended Extensions:</p> <ul> <li>Project Manager (by Alessandro Fragnani)</li> <li>DotENV (by mikestead)</li> <li>vscode-pdf (by tomoki1207)</li> <li>SQLite Viewer (by Florian Klampfer)</li> <li>Excel Viewer (by MESCIUS)</li> <li>Material Icon Theme (for a nicer look) (by Philipp Kief)</li> </ul>"},{"location":"docs/installation/#create-a-new-arkalos-project","title":"Create a New Arkalos Project","text":"<p>You're all set! Now, you can create a new Arkalos project.</p>"},{"location":"docs/logs/","title":"Logs and Debugging","text":""},{"location":"docs/logs/#debugging","title":"Debugging","text":"<p>To identify issues in your code, start by adding <code>print()</code>, <code>var_dump()</code>, or <code>dd()</code> functions. These help inspect variable values and data types during execution.</p> <p>When you are dealing with errors and exceptions, you can also wrap your code in <code>try - except</code> block.</p> <p>Instead of manually commenting out large sections of code, use the <code>dd()</code> function to halt execution at a specific point:</p> <pre><code>from arkalos import dd\n\ndef calculate_square(x):\n    result = x * x\n    dd(result)  # This will print the result and stop the script\n    return result\n\ndef main():\n    number = 5\n    square = calculate_square(number)\n    # The following line won't run due to dd()\n    print(f\"The square of {number} is {square}\")\n\nmain()\n</code></pre>"},{"location":"docs/logs/#logging","title":"Logging","text":"<p>Arkalos includes a pre-configured file-based logger for easy tracking of events:</p> <pre><code>from arkalos import Log\n\nLog.debug('debug message')\nLog.info('info message')\nLog.warning('warning message')\nLog.error('error message')\nLog.critical('critical error')\n</code></pre> <p>This will generate a log file in <code>data/logs/arkalos-&lt;year&gt;-&lt;month&gt;.log</code>.</p> <p>You can open it in VS Code to check the details, including the exact date and time in UTC (Zulu) timezone.</p>"},{"location":"docs/logs/#logging-data","title":"Logging Data","text":"<p>To log additional data, pass it as a second argument:</p> <pre><code>from arkalos import Log\n\ndata = {\n    'id': 1,\n    'tags': ['one', 'two'],\n}\n\nLog.info('info message', data)\n</code></pre> <p>Logging allows you to review execution details in a log file, making it easier to debug issues.</p>"},{"location":"docs/logs/#what-next","title":"What Next","text":"<p>Now you can learn about the Registry &amp; Bootstrapping.</p>"},{"location":"docs/new-project/","title":"Creating a New Arkalos Project","text":"<p>Ensure all the requirements are met.</p>"},{"location":"docs/new-project/#starting-a-new-arkalos-project","title":"Starting a New Arkalos Project","text":"<pre><code># Create a new folder and Python project.\nuv init &lt;project_name&gt;\n\n# Navigate to the new folder\ncd &lt;project_name&gt;\n\n# Add and install all dependencies (this may take a few minutes)\nuv add arkalos\n\n# Set up the Arkalos starter project\nuv run arkalos init\n</code></pre> <p>This will install Arkalos along with dependencies like NumPy, SciPy, Polars, Pandas for data frames, matplotlib, Ollama, and more.</p> <p>Your project folder structure will be automatically set up.</p> <p>That's it \u2014 you're ready to start coding!</p>"},{"location":"docs/new-project/#using-vs-code","title":"Using VS Code","text":"<ol> <li>Make sure you're in the project folder in the terminal.</li> <li>Run <code>code .</code> to open a new VS Code window in the current directory.</li> <li>Open the Project Manager extension from the side tab.</li> <li>In the side menu, hover under Favorites and click \"Save Project.\"</li> <li>Next time, easily open this project by double-clicking it in the Project Manager. To work on multiple projects, hover over the project name and click the \"Open in New Window\" icon on the right.</li> </ol>"},{"location":"docs/new-project/#working-on-an-existing-project","title":"Working on an Existing Project","text":"<pre><code>git pull &lt;your project repo&gt;\n\nuv sync\n\ncopy .env.example .env\n</code></pre>"},{"location":"docs/new-project/#folder-structure","title":"Folder Structure","text":"<p>Learn more about the Arkalos directory structure and where to organize your files.</p>"},{"location":"docs/notebooks/","title":"Writing Your First Arkalos Code and Notebook","text":"<p>This guide focuses on using VS Code with the Jupyter extension, as explained previously.</p> <p>You may need to install the development dependency:</p> <pre><code>uv add ipykernel --dev\n</code></pre>"},{"location":"docs/notebooks/#creating-a-new-ipynb-file","title":"Creating a New <code>.ipynb</code> File","text":"<p>Jupyter Notebooks are a great place to start exploring data, designing new code, experimenting, or prototyping.</p> <p>Notebooks contain cells where each cell functions like an independent script. You can run all cells or specific ones manually.</p> <p>When cells are run, all imported modules and declared variables are stored in memory and available in other cells. If a specific cell is skipped, its code won't be available in memory.</p> <p>Each cell has a single output displayed right after it. You can debug the code by printing variable values or, when analyzing data, display data frames (tables) first and generate visual charts in the next cell.</p> <p>Create a new <code>notebooks/my_notebook.ipynb</code> file inside the <code>notebooks/</code> folder.</p>"},{"location":"docs/notebooks/#first-cell","title":"First Cell","text":"<p>In the middle of the notebook, click on \"+ Code\" to add a new cell.</p> <p>In the top right corner of VS Code, select \"Select Kernel\" and choose the option that looks like:</p> <p><code>.venv (Python 3.13.1) .venv/bin/python</code>.</p> <p>Add this code to your first cell:</p> notebooks/my_notebook.ipynb (Cell 1)<pre><code>from arkalos import config, var_dump\n\npoint = {'x': 5, 'y': 10}\n\nvar_dump(point)\n</code></pre>"},{"location":"docs/notebooks/#running-and-resetting","title":"Running and Resetting","text":"<p>Click \"Run All\" at the top to execute all cells from the beginning.</p> <p>You can also run each cell individually by clicking the play triangle icon on the left of the cell.</p> <p>If something doesn't work properly, or if you modify custom modules in the <code>app/</code> folder after running a cell, click \"Restart\" to restart the Jupyter kernel and clear cache and memory.</p>"},{"location":"docs/notebooks/#another-cell","title":"Another Cell","text":"<p>You should see some output after running the first cell.</p> <p>Hover your mouse in the middle at the end of the output, and the \"+ Code\" button will appear. Click it to create the next cell.</p> <p>Alternatively, you can click the \"+ Code\" button in the top horizontal menu.</p> <p>Add this code to the new cell and run it:</p> notebooks/my_notebook.ipynb (Cell 2)<pre><code>config('app.name')\n</code></pre> <p>Unlike scripts, notebook cells automatically print the last variable or operation, so you don't need to use the <code>print()</code> function every time.</p> <p>You should see the name of your app as the output of this cell.</p>"},{"location":"docs/notebooks/#create-custom-modules","title":"Create Custom Modules","text":"<p>Remember from the Getting Started Guide the difference between Code to Run and Code to Reuse.</p> <p>While your initial thoughts about reusable functions, classes, configurations, or modules can start in a notebook or script, you should eventually move all reusable code into the <code>app/</code> directory.</p> <p>Let's create the <code>app/utils/my_utils.py</code> file, which will also act as a Python module. Add your first function there:</p> app/utils/my_utils.py<pre><code>from arkalos import config\n\ndef greet(greeting: str) -&gt; None:\n    print(greeting + ', ' + config('app.name'))\n</code></pre> <p>Now, consume your first reusable code and module in the notebook by creating a new cell and running it:</p> notebooks/my_notebook.ipynb (Cell 3)<pre><code>import app.utils.my_utils as my_utils\n\nmy_utils.greet('Hello')\n</code></pre>"},{"location":"docs/notebooks/#analyze-and-visualize-data","title":"Analyze and Visualize Data","text":"<p>Let's analyze and visualize some data from your Airtable or Notion database.</p> notebooks/my_notebook.ipynb (Cell 4)<pre><code>import pandas as pd\nfrom arkalos.data.extractors.notion_extractor import NotionExtractor\n# from arkalos.data.extractors.airtable_extractor import AirtableExtractor\n\nextractor = NotionExtractor()\n# extractor = AirtableExtractor()\n\n# Provide a table name from the .env file\ndata = extractor.fetchAllData('Tasks')  \n\ndf = pd.DataFrame(data)\n\ndf\n</code></pre> <p>Run this cell, and you should see a table.</p> <p>Finally, let's create a new cell to generate a pie chart.</p> <p>Assume you have a Tasks table with a \"Status\" column.</p> <p>This code will display a pie chart of task statuses by percentage:</p> notebooks/my_notebook.ipynb (Cell 5)<pre><code># \"Status\" is a column name. To access it use df.Status or df['Status']\ndf.Status.value_counts().plot(kind='pie', autopct='%1.0f%%', startangle=90)\n</code></pre> <p>Now update your Notion or Airtable by adding a new task and changing a few statuses. Then re-run all the cells and you will see an updated chart that reflects your data real-time.</p>"},{"location":"docs/notebooks/#from-notebook-to-scripts","title":"From Notebook to Scripts","text":"<p>Now that you have first experience writing code using Arkalos, let's continue and create our first script and run it from the terminal.</p>"},{"location":"docs/registry/","title":"Registry and Bootstrapping","text":""},{"location":"docs/registry/#understanding-the-registry","title":"Understanding the Registry","text":"<p>A Registry is like a simple table that helps your code quickly find and use the right functions, classes, or modules. It\u2019s similar to a library catalog \u2014 you look up a book by its title and find out where to get it.</p> <p>Think of it this way:</p> <ul> <li>The first column is a short key (like a book title).</li> <li>The second column is where to find the book (who has it, or which shelf it\u2019s on).</li> </ul> <p>When you need a book, you don\u2019t care who has it at that moment \u2014 you just use the title to get it. Similarly, in coding, you don\u2019t always care which database or module is being used behind the scenes. You just ask for what you need, and the Registry finds the right tool for the job.</p> <p>The advantage? You can swap out one tool for another without rewriting your entire codebase \u2014 just like borrowing the same book from a different library branch.</p> <p>The concept of Registry and retrieving dependencies dynamically is widely used across multiple fields under different names, e.g: Lookup Table, Dynamic Linker, Feature Store, Dependency Injection (DI), Service Container, Factory, Inventory System, Ledger, Dynamical System and Dynamic State Selection, Neural Memory Retrieval, Schema Theory, Theory of Forms, and Category Theory.</p>"},{"location":"docs/registry/#getting-modules-from-the-registry","title":"Getting Modules from the Registry","text":"<p>In Arkalos, you can retrieve functions and modules from the Registry using a simple command:</p> <pre><code>from arkalos import Registry\n\nconfig_func = Registry.get('config')\nconfig_func('app.name')\n</code></pre> <p>This is the same as doing:</p> <pre><code>from arkalos import config\nconfig('app.name')\n</code></pre>"},{"location":"docs/registry/#why-use-the-registry","title":"Why use the Registry?","text":"<p>Using a Registry allows for flexibility. The <code>config()</code> function itself retrieves the actual configuration function from the Registry before running it. This means you can replace the default <code>config()</code> function with your own custom version when needed.</p> <p>For example, let\u2019s say you want to override the built-in configuration system with your own:</p> <pre><code>from typing import Optional\n\nfrom arkalos import Registry\n\ndef my_config(key: str, default: Optional[str]=None) -&gt; str:\n    return f\"Custom config for {key}\"\n\nRegistry.register('config', my_config)\n\nfrom arkalos import config\n\n# Now this will return our custom message instead of the default behavior\nprint(config('app.name'))  # Output: Custom config for app.name\n</code></pre> <p>With this approach, any script using <code>config('app.name')</code> will now call your custom function instead of the default one.</p>"},{"location":"docs/registry/#registering-classes","title":"Registering Classes","text":"<p>Arkalos comes with a few other utility functions that retrive the same object of the same class and a contract.</p> <pre><code>from arkalos import Log, dwh\n</code></pre> <p><code>Log</code> is a module wrapper around the Logger class that comes from the Registry.</p> <p><code>dwh()</code> is a simple helper function that allows you to retrive the data warehouse from any part of your application or a script.</p> <pre><code>print(dwh().NAME)    # SQLite\n</code></pre> <p>You can register classes the same way:</p> <pre><code>from arkalos import Registry\n\nclass MyClass:\n    def myAction(self):\n        print('My action')\n\nRegistry.register('my_component', MyClass)\n\ndef my_component():\n    return Registry.get('my_component')\n\nmy_component().myAction()\n</code></pre>"},{"location":"docs/registry/#bootstrapping-setting-up-your-project","title":"Bootstrapping: Setting Up Your Project","text":"<p>Bootstrapping is the process of setting up and starting your application \u2014 just like how a computer boots up when you turn it on.</p> <p>When you develop an app or run scripts frequently, you might want to add global setup logic that runs every single time before anything else. For example, if your app depends on a database or external service, you can configure it at the start.</p> <p>Arkalos includes a default file for this: <code>app/bootstrap.py</code>. This file acts as a global setup script.</p> <p>Here\u2019s what it looks like by default:</p> app/bootstrap.py<pre><code>from arkalos import Registry\n\ndef run():\n    pass  # You can register custom modules here\n    # Registry.register('my_module', my_module)\n</code></pre>"},{"location":"docs/registry/#how-to-use-bootstrapping","title":"How to Use Bootstrapping","text":"<p>Before running any script, you can bootstrap your project by adding this at the top of your file:</p> <pre><code>import app.bootstrap as bootstrap\nbootstrap.run()\n</code></pre> <p>This ensures all necessary configurations and modules are properly set up before the rest of your script runs.</p>"},{"location":"docs/registry/#why-this-matters","title":"Why This Matters","text":"<p>Using a Registry and Bootstrapping helps keep your code organized, flexible, and scalable. With these tools, you can:</p> <ul> <li>Easily swap out modules or functions without rewriting code.</li> <li>Set up global settings that apply across your entire project.</li> <li>Keep your scripts clean by handling setup logic in one place.</li> </ul>"},{"location":"docs/registry/#what-next","title":"What Next","text":"<p>Congratulations! You have completed the Writing Basic Code guide and can start writing Arkalos code!</p> <p>You may explore the next section about Data Sources &amp; Extractors</p>"},{"location":"docs/scripts/","title":"Scripts","text":"<p>Scripts are simple programs that run tasks automatically. Unlike Notebooks, they don't need a UI like Jupyter and can be run from the terminal, a server, or even as an API. They're great for automating workflows, launching a microserver or an agent.</p>"},{"location":"docs/scripts/#why-use-scripts","title":"Why Use Scripts?","text":"<p>Your reusable code lives in the <code>app/</code> folder, but it won't do anything by itself. Scripts are how you make that code run \u2014 whether it's a data pipeline, analysis, automation, AI agent or an app.</p>"},{"location":"docs/scripts/#types-of-scripts","title":"Types of Scripts","text":"<ol> <li> <p>One-Time Scripts: These scripts run once and stop. Think of tasks like analyzing data or running an ETL process to load data into a warehouse.</p> </li> <li> <p>Continuous Scripts: These run non-stop, like a web server or a chatbot that stays active in your terminal. They keep running until you stop them manually.</p> </li> </ol>"},{"location":"docs/scripts/#your-first-script","title":"Your First Script","text":"<p>First, create a utility module inside <code>app/utils/</code> folder:</p> app/utils/my_utils.py<pre><code>from arkalos import config\n\ndef greet(greeting: str) -&gt; None:\n    print(f\"{greeting}, {config('app.name')}\")\n</code></pre> <p>Now, create your first script inside <code>scripts/cli/</code> folder.</p> scripts/cli/my_script.py<pre><code>import app.utils.my_utils as my_utils\n\nGREETING = \"Hello\"\n\nprint('Running my script...')\nmy_utils.greet(GREETING)\nprint('Done. Bye!')\n</code></pre>"},{"location":"docs/scripts/#running-scripts","title":"Running Scripts","text":"<p>To run your script, use the terminal command <code>uv run &lt;path&gt;</code>:</p> <pre><code>uv run scripts/cli/my_script.py\n</code></pre> <p>While typing the path, use Tab for autocompletion.</p>"},{"location":"docs/scripts/#adding-arguments-to-scripts","title":"Adding Arguments to Scripts","text":"<p>Scripts can take inputs, just like functions. Update your script to accept a greeting message:</p> scripts/cli/my_script.py<pre><code>import argparse\nimport app.utils.my_utils as my_utils\n\nparser = argparse.ArgumentParser(description=\"My Greeting Script\")\nparser.add_argument('greeting', metavar='&lt;greeting&gt;', help='A greeting message')\nargs = parser.parse_args()\n\nprint('Running my script...')\nmy_utils.greet(args.greeting)\nprint('Done. Bye!')\n</code></pre> <p>Run it with an argument (add quotes if there are spaces):</p> <pre><code>uv run scripts/cli/my_script.py \"Hello World\"\n</code></pre> <p>For help, type:</p> <pre><code>uv run scripts/cli/my_script.py -h\n</code></pre>"},{"location":"docs/scripts/#script-example-import-data-into-a-warehouse","title":"Script Example: Import Data into a Warehouse","text":"<p>Let's pull data from your Airtable or Notion into a local data warehouse.</p> <p>Create a new script:</p> scripts/etl/sync_airtable_dwh.py<pre><code>from arkalos.data.extractors.airtable_extractor import AirtableExtractor\n# or for Notion\n# from arkalos.data.extractors.notion_extractor import NotionExtractor\nfrom arkalos.workflows.etl_workflow import ETLWorkflow\n\nwf = ETLWorkflow(AirtableExtractor)\nwf.run(drop_tables=True)\n</code></pre> <p>Run it:</p> <pre><code>uv run scripts/etl/sync_airtable_dwh.py\n</code></pre> <p>You'll find your data in <code>data/dwh/dwh.db</code>. Now you can analyze data offline!</p>"},{"location":"docs/scripts/#script-example-talk-to-your-data","title":"Script Example: Talk to Your Data","text":"<p>Now, let's chat with your data using AI.</p> <p>First, make sure the Ollama server is running. In VS Code in the terminal section at the bottom, you can press \"+\" to open a new terminal tab and run ollama server there.</p> <pre><code>ollama serve\n</code></pre> <p>Create a new script:</p> scripts/ai/dwh_agent.py<pre><code>from arkalos.ai.agents import DWHAgent\n\nagent = DWHAgent()\nagent.run()\n</code></pre> <p>Run the agent:</p> <pre><code>uv run scripts/ai/dwh_agent.py\n</code></pre> <p>Now you can ask questions like:</p> <ul> <li>What tables do we have?</li> <li>Show me all tasks.</li> <li>Show rooms with a balcony.</li> </ul> <p>Type <code>exit</code> to stop the agent.</p>"},{"location":"docs/scripts/#stopping-scripts","title":"Stopping Scripts","text":"<p>To stop a long-running script, press <code>Ctrl + D</code> or <code>Ctrl + C</code> in your terminal.</p>"},{"location":"docs/scripts/#next-steps","title":"Next Steps","text":"<p>Now that you've learned about the Code to Run (notebooks and scripts), check out the next Code to Reuse (App &amp; Modules) guide to organize your reusable code.</p>"},{"location":"docs/structure/","title":"Directory Structure and Code to Run vs Code to Reuse","text":"<p>Arkalos folder structure ensures that your project is well-organized, separating code to run from code to reuse, and helps you with growing your project, aligning teams, and easily manage modules, configuration, notebooks, scripts, data, and documentation.</p> <p>You can utilize this structure for any project from basic customer research, academic project, a chatbot in the terminal, a personal assistant, to IoT, robotics and autonomous vehicles (AVs).</p> <pre><code>app/\n    _private/               # Git-ignored folder for personal or work-in-progress code\n    ai/                     # AI and ML code\n        actions/            # AI actions and tasks that agents can perform\n        agents/             # AI agents (e.g., chatbots, assistants, robots, AVs)\n        evals/              # AI model evaluation tools\n        trainers/           # Model training and fine-tuning modules\n    algorithms/             # Custom algorithms and computational logic\n    cli/                    # Command Line Interface tools\n    core/                   # Core app logic and Arkalos extensions\n    data/                   # Data extraction, transformation, analysis, warehousing\n        analyzers/          # Data analysis modules (e.g., classification, clustering)\n        extractors/         # Data source connectors and extraction tools\n        transformers/       # Data cleaning, normalization, and transformation tools\n        types/              # Custom data types (data contracts)\n        visualizers/        # Data visualization, charts, graphs and plots\n        warehouse/          # Data warehouse setup and loaders\n    hadrware/               # Interfaces for hardware and robotics\n        actuators/          # Drivers/interfaces to control physical actuators (e.g; motors, arms)\n        communicators/      # Protocols and data exchange between hardware components (e.g; Ethernet)\n        controllers/        # Strategies/algorithms to regulate actuator behavior based on sensor feedback\n        sensors/            # Drivers for sensor and environment data acquisition (e.g., vision)\n    http/                   # HTTP servers, APIs, dashboards, and microservices\n        controllers/        # HTTP web controllers to bundle multiple actions and routes\n        middleware/         # HTTP web middleware logic to run between requests\n        routes/             # HTTP web routes to expose the app externally via web URLs\n    jobs/                   # Background tasks, queues, and cron jobs\n    services/               # Services and systems, e.g. API connectors\n    utils/                  # Utility functions and helpers\n    workflows/              # Multi-step workflows (e.g., data pipelines, automation)\n        ai/                 # AI-specific workflows (config, training, evaluation)\n        etl/                # Data extraction, crawling, transformation, and loading workflows\n        experiments/        # Scientific experiments and hypothesis testing\n        gen/                # Data generation workflows for testing\n        processes/          # Business processes and other automation workflows\n\nconfig/                     # Configuration files with Python logic, works with .env\n\ndata/                       # Git-ignored data folder, used manually and by Arkalos\n    drive/                  # Main storage for raw data, PDFs, CSVs, images, etc.\n    dwh/                    # Data warehouse data. Auto-generated schema and cache\n    gen/                    # Automatically generated data for testing\n    keys/                   # Secret keys for API authentication and services\n    logs/                   # Logs generated by Arkalos (`arkalos-&lt;year&gt;-&lt;month&gt;.log`)\n    models/                 # Trained AI models saved here\n    tokens/                 # Automatically generated and stored auth tokens\n\ndocs/                       # Project documentation (usage, modules, contributions)\n\nnotebooks/                  # Jupyter Notebooks for exploration and prototyping\n    _private/               # Git-ignored folder for personal notebook drafts\n\nscripts/                    # Stand-alone executable scripts\n    _private/               # Git-ignored folder for personal scripts\n    ai/                     # Scripts to train models or run AI agents\n    cli/                    # Command Line Interface scripts\n    etl/                    # Data workflows: extraction, transformation, loading\n    experiments/            # Prototyping, exploration, and scientific experiments\n    gen/                    # Scripts to generate test data\n    http/                   # Serve APIs, microservices, dashboards, or web apps\n    jobs/                   # Scheduled tasks, background jobs, and cron jobs\n    processes/              # Business processes and automation scripts\n\ntests/                      # Unit and other tests for your code\n</code></pre>"},{"location":"docs/structure/#private-code-inside-_private-folders","title":"Private code inside <code>_private</code> folders","text":"<p>In the Arkalos project, various folders named <code>_private/</code> are gitignored.</p> <p>This means when you share your code with the team and push it to a Git repository (e.g., GitHub), any files inside these <code>_private</code> folders won\u2019t be shared or committed.</p> <p>If you're working alone, you can ignore such folders.</p> <p>In a team setting, use it to create preliminary versions of your code or work-in-progress files without worrying about accidentally committing them.</p>"},{"location":"docs/structure/#code-to-run-notebooks-and-scripts","title":"Code to Run: <code>notebooks/</code> and <code>scripts/</code>","text":"<p>All runnable code should be placed in either the <code>notebooks/</code> or <code>scripts/</code> folders.</p> <p>Typically, you start by exploring data, experimenting, or prototyping in a Jupyter Notebook.</p> <p>Once ready, convert your work into stand-alone scripts that you and your team can run from the terminal.</p>"},{"location":"docs/structure/#code-to-reuse-and-consume-app","title":"Code to Reuse and Consume: <code>app/</code>","text":"<p>Place any code you want to reuse across notebooks or scripts \u2014 such as functions, classes, modules, or packages \u2014 in subfolders inside the <code>app/</code> directory.</p> <p>Avoid having variables in the global scope, and ensure no code runs on import.</p>"},{"location":"docs/structure/#code-to-run-vs-code-to-reuse","title":"Code to Run vs. Code to Reuse:","text":"<p>Organize your code as follows:</p> <ul> <li><code>notebooks/</code> \u2013 Jupyter Notebooks for exploration and prototyping</li> <li><code>scripts/</code> \u2013 Stand-alone scripts to execute</li> <li><code>app/</code> \u2013 Reusable code (functions, constants, modules, classes, packages)</li> </ul> <p>Example of code that belongs in <code>scripts/</code>:</p> scripts/cli/example.py<pre><code>import app.utils.my_module as my_module\n\nx = 5\nprint(my_module.my_func(x))\n</code></pre> <p>Example of reusable code that belongs in <code>app/</code>:</p> app/utils/my_module.py<pre><code>def my_func(x):\n    return x + 5\n</code></pre>"},{"location":"docs/structure/#other-primary-folders","title":"Other Primary Folders","text":"<p>In addition to <code>notebooks/</code>, <code>scripts/</code>, and <code>app/</code>, the root of your project includes:</p> <ul> <li><code>config/</code> \u2013 Configuration files that work with the <code>.env</code> file. These are actual Python files and can include conditional logic, unlike simple text-based configs.  </li> <li><code>data/</code> \u2013 Upload raw data, analysis files, or secret keys here. Arkalos will also automatically store files such as data warehouse contents or trained models. This folder is git-ignored.  </li> <li><code>docs/</code> \u2013 Optional: Document your project, including module descriptions, usage instructions, and contribution guidelines.  </li> <li><code>tests/</code> \u2013 Write tests to ensure your code works as expected.</li> </ul>"},{"location":"docs/structure/#subfolders","title":"Subfolders","text":"<p>Let\u2019s dive into the subfolders inside <code>app/</code>, <code>data/</code>, and <code>scripts/</code>.</p>"},{"location":"docs/structure/#app","title":"<code>app/</code>","text":"<p>This folder contains reusable code organized into:</p> <ul> <li><code>app/ai/</code> \u2013 AI and ML code, including agents, environments, tasks, model trainers, and evaluations.  </li> <li><code>app/algorithms/</code> \u2013 Custom computational logic when standard libraries aren\u2019t enough.  </li> <li><code>app/cli/</code> \u2013 Custom Command Line Interface tools and commands.  </li> <li><code>app/core/</code> \u2013 Core, initialization, or bootstrapping logic, and Arkalos extensions.  </li> <li><code>app/data/</code> \u2013 Data contracts (types), extraction, transformation, analysis, and warehousing.  </li> <li><code>app/hardware/</code> \u2013 Interfaces for hardware and robotics (e.g. camera, vision, motors, wifi).</li> <li><code>app/http/</code> \u2013 Expose your project as an HTTP API, microservice, or full web UI/dashboard.  </li> <li><code>app/jobs/</code> \u2013 Background tasks, queues, and cron jobs.  </li> <li><code>app/services/</code> \u2013 Services and systems, e.g. API connectors</li> <li><code>app/utils/</code> \u2013 Utility functions extending Python's standard capabilities.  </li> <li><code>app/workflows/</code> \u2013 Multi-step workflows like data pipelines, business processes, or automation.</li> </ul>"},{"location":"docs/structure/#appai","title":"<code>app/ai/</code>","text":"<p>Every AI agent will typically include an <code>Agent</code> class and a <code>Task</code> it can perform.</p> <ul> <li><code>app/ai/actions/</code> \u2013 Actions, tasks, tools, or skills that agents can perform.  </li> <li><code>app/ai/agents/</code> \u2013 AI agents, from simple chatbots to complex robotics and autonomous vehicles.   </li> <li><code>app/ai/evals/</code> \u2013 Tools and modules for evaluating AI models.  </li> <li><code>app/ai/trainers/</code> \u2013 Modules for training and fine-tuning AI models.</li> </ul>"},{"location":"docs/structure/#appdata","title":"<code>app/data/</code>","text":"<ul> <li><code>app/data/analyzers/</code> \u2013 Modules for exploring and analyzing data (e.g., classification, clustering).  </li> <li><code>app/data/extractors/</code> \u2013 Data sources, connectors, and extraction tools.  </li> <li><code>app/data/transformers/</code> \u2013 Tools for data cleaning, normalization, and advanced transformations.</li> <li><code>app/data/types/</code> \u2013 Custom data types (data contracts)</li> <li><code>app/data/visualizers/</code> \u2013 Data visualization, charts, graphs, plots.  </li> <li><code>app/data/warehouse/</code> \u2013 Your custom data warehouse setup and loaders.</li> </ul>"},{"location":"docs/structure/#apphardware","title":"<code>app/hardware/</code>","text":"<ul> <li><code>app/hardware/actuators/</code> \u2013 Drivers/interfaces to control physical actuators (e.g; motors, arms).</li> <li><code>app/hardware/communicators/</code> \u2013 Protocols and data exchange between hardware components (e.g; Ethernet).</li> <li><code>app/hardware/controllers/</code> \u2013 Strategies/algorithms to regulate actuator behavior based on sensor feedback.</li> <li><code>app/hardware/sensors/</code> \u2013 Drivers for sensor and environment data acquisition (e.g., vision).</li> </ul>"},{"location":"docs/structure/#apphttp","title":"<code>app/http/</code>","text":"<ul> <li><code>app/http/controllers/</code> \u2013 HTTP web controllers to bundle multiple actions and routes.</li> <li><code>app/http/middleware/</code> \u2013 HTTP web middleware logic to run between requests.</li> <li><code>app/http/routes/</code> \u2013 HTTP web routes to expose the app externally via web URLs.</li> </ul>"},{"location":"docs/structure/#appworkflows","title":"<code>app/workflows/</code>","text":"<ul> <li><code>app/workflows/ai/</code> \u2013 AI workflows, including model configuration, training, and evaluation.  </li> <li><code>app/workflows/etl/</code> \u2013 Data workflows and pipelines, covering extraction, transformation, and loading.  </li> <li><code>app/workflows/experiments/</code> \u2013 Scientific experiments, hypothesis testing, and advanced workflows.  </li> <li><code>app/workflows/gen/</code> \u2013 Workflows to generate basic data, usually for testing.  </li> <li><code>app/workflows/processes/</code> \u2013 Business processes and other automation workflows.</li> </ul>"},{"location":"docs/structure/#data","title":"<code>data/</code>","text":"<p>All files in <code>data/</code> are git-ignored.</p> <p>Most subfolders are used automatically by Arkalos, but you\u2019ll manually manage files in <code>drive/</code> and <code>keys/</code>.</p> <p>For sharing files with your team, use cloud storage (e.g., Google Drive) or a separate repository.</p> <p>Subfolders:</p> <ul> <li><code>data/drive/</code> \u2013 Your main data storage, similar to a personal drive or cloud storage. Store PDFs, CSVs, images, videos, raw data, or training datasets here.  </li> <li><code>data/dwh/</code> \u2013 The data warehouse. By default, SQLite is used, and its schema, cache, and data are auto-generated here.  </li> <li><code>data/gen/</code> \u2013 Automatically generated data, typically for testing purposes.  </li> <li><code>data/keys/</code> \u2013 Secret keys for services like Google Cloud API or enterprise servers.  </li> <li><code>data/logs/</code> \u2013 Logs generated by Arkalos. Default file format: <code>arkalos-&lt;year&gt;-&lt;month&gt;.log</code>.  </li> <li><code>data/models/</code> \u2013 Save trained AI model outputs here.</li> </ul>"},{"location":"docs/structure/#scripts","title":"<code>scripts/</code>","text":"<p>Scripts often import and run workflows or services from the <code>app/workflows/</code> directory. They are Code to Run, while <code>app/</code> contains Code to Reuse.</p> <p>Subfolders:</p> <ul> <li><code>scripts/ai/</code> \u2013 AI-related scripts, like training models or running agents.  </li> <li><code>scripts/cli/</code> \u2013 Command Line Interface scripts for managing your workspace.  </li> <li><code>scripts/etl/</code> \u2013 Data extraction, transformation, and loading workflows.  </li> <li><code>scripts/experiments/</code> \u2013 Scripts for exploration, prototyping, and hypothesis testing.  </li> <li><code>scripts/gen/</code> \u2013 Scripts to generate basic or testing data.  </li> <li><code>scripts/http/</code> \u2013 Serve your app as an internal API, microservice, dashboard, or public web server.  </li> <li><code>scripts/jobs/</code> \u2013 Background tasks, queues, and cron jobs that run on a schedule.  </li> <li><code>scripts/processes/</code> \u2013 Business process automation and other workflows.</li> </ul>"},{"location":"docs/structure/#configuring","title":"Configuring","text":"<p>Now that you know where to organize your files, the next step is understanding the configuration files included with Arkalos, such as inside <code>config/app.py</code>, <code>.env.example</code>, <code>.env</code> and the <code>app/bootstrap.py</code>.</p> <p>Read next: Configuration &amp; Env.</p>"},{"location":"docs/teamwork/","title":"Working as a Team","text":"<p>Frequently commit your changes with git and push them to a GitHub or other repository so your teammates, school, or organization can access your code.</p> <p>Even if you work alone, using Git helps you share your code between multiple devices. For example, you can work or study at home or in a caf\u00e9 and then continue from your class, library, or office the next day.</p>"},{"location":"docs/teamwork/#where-to-start-writing-app-code","title":"Where to Start Writing App Code?","text":"<p>Check the folder structure guide to understand the default Arkalos project layout. However, you are not required to follow it strictly. Feel free to remove unnecessary folders and adjust the structure to fit your project.</p> <p>For example:</p> <ul> <li>If your project covers multiple domains or departments, you can create an <code>app/domains/</code> folder.</li> <li>If you are building a native desktop app, you might add an <code>app/ui/</code> folder.</li> <li>If developing a game engine, you can use the default <code>app/core/</code> folder or create <code>app/engine/</code>.</li> </ul>"},{"location":"docs/teamwork/#stem-students-teachers-schools-and-universities","title":"STEM Students, Teachers, Schools, and Universities","text":"<p>If you are a STEM student or self-learning math, statistics, or ML, you can write your implementations in the <code>app/algorithms/</code> folder, separate from notebooks.</p> <p>For schools and universities, a single Arkalos repository can host all class materials, including default modules and Notebook templates. You may organize code by a topic or a year using subfolders, such as <code>notebooks/ml101/</code> and <code>notebooks/ml102/</code>.</p>"},{"location":"docs/teamwork/#data-analysis-etl-migration-visualization-and-warehousing","title":"Data Analysis, ETL, Migration, Visualization, and Warehousing","text":"<p>For working with data (custom types, transformation, visualization, extraction, or analysis), use the <code>app/data/</code> folder. This is different from the <code>data/</code> folder, which stores downloaded files and datasets.</p> <p>If you are an indepedent data analyst, researcher, freelancer, consultant, or an agency, you do not have to create a new Arkalos project every time and can simply create a folder for each client while sharing the same app code, e.g. <code>notebooks/acme_corp/</code> for one client, and <code>notebooks/nova_solutions/</code> - for another.</p>"},{"location":"docs/teamwork/#training-a-model-or-building-an-ai-agent","title":"Training a Model or Building an AI Agent","text":"<p>If you're developing an AI agent or training a model, start in the <code>app/ai/</code> folder.</p>"},{"location":"docs/teamwork/#automating-business-processes-and-workflows","title":"Automating Business Processes and Workflows","text":"<p>To automate processes or create workflows, use the <code>app/workflows/</code> folder.</p>"},{"location":"docs/teamwork/#scientific-method-workflows-and-experiments","title":"Scientific Method, Workflows and Experiments","text":"<p>If you are a Master's or PhD student, data scientist, business analyst or a product manager designing experiments (e.g., A/B testing or hypothesis testing), use the <code>app/workflows/experiments/</code> subfolder.</p>"},{"location":"docs/teamwork/#extending-arkalos-and-writing-core-helpers-and-modules","title":"Extending Arkalos and Writing Core Helpers and Modules","text":"<p>To modify Arkalos core functions like <code>config()</code>, create implementations in <code>app/core/</code>.</p> <p>For general utility functions, such as custom string handling, place them in <code>app/utils/</code>.</p>"},{"location":"docs/teamwork/#robotics-hardware-avs-and-more","title":"Robotics, Hardware, AVs, and More","text":"<p>If working with robotics or hardware, start in the <code>app/hardware/</code> folder.</p>"},{"location":"docs/teamwork/#what-next","title":"What Next","text":"<p>Now that we know about the app code, modules and working as a team, let's continue to Workflows.</p>"},{"location":"docs/utils/","title":"Utils","text":"<p>Utils are utility or helper functions that simplify coding tasks.</p> <ul> <li>Common utility functions should be placed in the <code>app/utils/</code> folder.</li> <li>Core functions, especially those related to extending the Arkalos framework, should go into the <code>app/core/</code> folder. For example, you can override the default <code>config()</code> function behavior by implementing your own version.</li> </ul>"},{"location":"docs/utils/#available-utils","title":"Available Utils","text":"<p>All utility functions can be imported directly from Arkalos:</p> <pre><code>from arkalos import config, env, dd, var_dump, base_path, get_data_schema\n</code></pre>"},{"location":"docs/utils/#utility-functions","title":"Utility Functions","text":"<ul> <li><code>config('config_file.key')</code> - Retrieves a configuration value.</li> <li><code>env('ENV_KEY')</code> - Fetches an environment variable.</li> <li><code>var_dump(variable)</code> - Displays the contents of a variable for debugging.</li> <li><code>dd(variable)</code> - Dumps a variable and stops execution.</li> <li><code>base_path()</code> - Returns the string of the current base path to the project root. Optionally, can accept an argument.</li> <li><code>get_data_schema(data) -&gt; Polars Schema</code> - Infers data structure from the first rows of the data and returns polars.Schema object.</li> </ul>"},{"location":"docs/utils/#dd-function","title":"<code>dd()</code> Function","text":"<p>The <code>dd()</code> function (short for \"dump and die\") calls <code>var_dump()</code>, but also halts script execution. It is useful for debugging and testing.</p>"},{"location":"docs/utils/#functional-programming-fp-utils","title":"Functional Programming (FP) Utils","text":"<p>Also can be directly imported from the Arkalos:</p> <pre><code>from arkalos import partial, compose, pipe\n</code></pre> <ul> <li><code>partial(function, {args})</code> - Partial Application of a function where a new function is created and certain arguments are fixed. Great for composition or passing functions or classes as arguments into other functions while setting arguments to specific values. (it is a function from <code>functools</code> module)</li> <li><code>compose(function1, function2, ...)</code> - Applies functions right to left.</li> <li><code>pipe(function1, function2,  ...)</code> - Applies functions left to right.</li> </ul>"},{"location":"docs/utils/#debugging-and-logs","title":"Debugging and Logs","text":"<p>Next, explore more debugging and logging tools in the Logs &amp; Debugging section.</p>"},{"location":"docs/web-crawler/","title":"Python Web Extractor, Scraper &amp; Crawler","text":"<p>Before you start, make sure the browser is configured properly.</p> <p>Arkalos includes a powerful built-in WebExtractor tool that allows you to automate the process of gathering data from websites, whether it's downloading full articles, scraping specific information, or crawling multiple pages linked from a start page.</p> <ul> <li>Crawling means starting from a base URL and automatically following internal links to extract data from every page it finds.</li> <li>Scraping means extracting specific data (like a title or price) from a specific page or part of a page.</li> </ul>"},{"location":"docs/web-crawler/#crawling-a-website-saving-web-pages-in-markdown","title":"\ud83d\udd78\ufe0f Crawling a Website: Saving Web Pages in Markdown","text":"<p>Want to download a website\u2019s content for offline reading or AI training? Here's how to crawl the Arkalos documentation and save each page in Markdown format:</p> notebooks/web_extractor.ipynb<pre><code>from arkalos.data.extractors import WebExtractor\n\narkalos = WebExtractor('https://arkalos.com', True, 'article')\narkalos.crawl()\n</code></pre> <p>This creates a folder at <code>data/drive/crawl/arkalos.com/</code> containing one Markdown file per page.</p> <p>WebExtractor parameters:</p> <ol> <li>Base URL \u2013 Starting page.</li> <li>Trailing slash flag \u2013 Set to <code>True</code> if URLs on the site end with a slash (e.g. <code>/docs/</code>).</li> <li>CSS selector for content \u2013 For example <code>main</code>, or a specific <code>.class</code> or <code>#id</code> where the content is located.</li> </ol> <p>Note</p> <p>Arkalos waits for the page and main content area to fully load before scraping.</p> <p>Calling <code>crawl()</code> starts from the base page, discovers internal links, and saves every visited page as Markdown.</p>"},{"location":"docs/web-crawler/#scraping-specific-pages-only","title":"\ud83c\udfaf Scraping Specific Pages Only","text":"<p>You don\u2019t always need the whole website. If you want to scrape specific pages, use:</p> notebooks/web_extractor.ipynb<pre><code>await arkalos.crawlSpecificPages(['docs/installation'])\n</code></pre> <p>Pass a list of relative URLs. Arkalos will visit each and extract the content using the same content selector.</p>"},{"location":"docs/web-crawler/#extracting-specific-details-from-pages","title":"\ud83d\udd0d Extracting Specific Details From Pages","text":"<p>Want to extract things like titles, prices, tags, or ratings from multiple articles on a page? You can create your own structured extractor.</p>"},{"location":"docs/web-crawler/#step-1-define-what-data-to-extract","title":"Step 1: Define what data to extract","text":"<p>Here\u2019s an example website that has this HTML:</p> <pre><code>&lt;article data-id=\"6IF3WGP8V\"&gt;\n  &lt;a href=\"...\"&gt;Title of the article&lt;/a&gt;\n  &lt;div data-item=\"description\"&gt;Article text&lt;/div&gt;\n  &lt;div class=\"rating\"&gt;\n    &lt;img ...&gt;\n    5\n  &lt;/div&gt;\n  &lt;div class=\"tags\"&gt;\n    &lt;span data-item=\"tag\"&gt;Category A&lt;/span&gt;\n    &lt;span data-item=\"tag\"&gt;Category B&lt;/span&gt;\n  &lt;/div&gt;\n&lt;/article&gt;\n</code></pre>"},{"location":"docs/web-crawler/#step-2-create-a-webdetails-class","title":"Step 2: Create a <code>WebDetails</code> class","text":"app/data/extractors/my_website_web_extractor.py<pre><code>from arkalos.data.extractors import WebExtractor, WebDetails, _\nfrom dataclasses import dataclass\nimport polars as pl\n\n@dataclass\nclass ArticleDetails(WebDetails):\n    CONTAINER = 'article[data-id]'\n\n    id: _[str, None, 'data-id']           # Attribute from container\n    url: _[str, 'a', 'href']              # Link\n    title: _[str, 'a']                    # Text from &lt;a&gt;\n    description: _[str, '[data-item=\"description\"]']\n    tags: _[list[str], '[data-item=\"tag\"]']\n    rating: _[int, '.rating', 1]          # Second child (after image)\n</code></pre> <p>The <code>_</code> is a special alias for <code>Annotated</code> to provide typing and selector info in one line.</p>"},{"location":"docs/web-crawler/#step-3-create-your-custom-extractor","title":"Step 3: Create your custom extractor","text":"app/data/extractors/my_website_web_extractor.py<pre><code>class MyWebsiteWebExtractor(WebExtractor):\n    BASE_URL = 'https://mywebsite.com'\n    PAGE_CONTENT_SELECTOR = 'main'\n    SCROLL = True\n    DETAILS = ArticleDetails\n\n    async def crawlTechArticles(self):\n        return await self.crawlSpecificDetails(['/category/tech'])\n</code></pre>"},{"location":"docs/web-crawler/#step-4-run-your-crawler","title":"Step 4: Run your crawler","text":"notebooks/my_web_crawler.ipynb<pre><code>from app.data.extractors.my_website_web_extractor import MyWebsiteWebExtractor\n\nmywebsite = MyWebsiteWebExtractor()\ndata = await mywebsite.crawlTechArticles()\n\ndf = pl.DataFrame(data)\ndf\n</code></pre> <p>You can view the results directly in VS Code using the Data Wrangler extension.</p>"},{"location":"docs/web-crawler/#webdetails-and-annotations","title":"\ud83e\udde9 WebDetails and Annotations","text":"<p>To extract structured data from pages, you define a subclass of <code>WebDetails</code> and annotate each property using a custom annotation format. These annotations tell the scraper what to extract and how.</p> <p>The annotation format is:</p> <pre><code>_[data_type, 'CSS selector' | None, optional_extraction_instruction]\n</code></pre> <ul> <li> <p><code>data_type</code>: The expected Python type of the result. This can be:</p> <ul> <li><code>str</code>, <code>int</code>, <code>float</code></li> <li><code>list[str]</code> \u2014 to extract multiple values as a list using <code>querySelectorAll()</code></li> </ul> </li> <li> <p><code>'CSS selector'</code>: A standard CSS selector string for locating the desired element inside the container. If set to <code>None</code>, the container itself will be used.</p> </li> <li> <p><code>optional_extraction_instruction</code>: Tells how to extract the data. It could be:</p> <ul> <li>An attribute name (e.g. <code>'href'</code>)</li> <li>A <code>slice</code>, like <code>1:</code> or <code>:3</code></li> <li>A regular expression string with one capture group</li> <li>An integer \u2014 to get a specific child node (e.g. the second text node)</li> </ul> </li> </ul> <p>Default Behavior:</p> <p>If you only provide the data type and a CSS selector \u2014 without any extras \u2014 the text content of the element is extracted using <code>.textContent</code>.</p> <p>If the CSS selector doesn't match anything inside the container, the default value for the data type is returned (<code>\"\"</code>, <code>0</code>, etc.).</p> <p>Supported Extraction Instructions (the 3rd argument)</p> <ol> <li> <p>Attribute Name <pre><code>url: _[str, 'a', 'href']\n</code></pre>    Extracts the value of the <code>href</code> attribute from the <code>&lt;a&gt;</code> element.</p> </li> <li> <p>Slice <pre><code>price: _[int, '.price', '1:']  # Skips the currency symbol\n</code></pre>    If <code>.price</code> contains text like <code>\"$99\"</code>, the slice will extract <code>\"99\"</code> and convert it to <code>int</code>.</p> </li> <li> <p>Regular Expression <pre><code>sku: _[str, '.sku', r'ID-(\\w{8})']\n</code></pre>    Extracts matched group from a string like <code>\"Product ID-ABC12345\"</code>.</p> </li> <li> <p>Child Node Index <pre><code>rating: _[int, '.rating', 1]\n</code></pre>    Useful when the target number is inside a sibling text node, and you want to skip over images or other tags.</p> </li> </ol> <p>Lists with querySelectorAll()</p> <p>When the type is <code>list[str]</code>, <code>querySelectorAll()</code> is used instead of <code>querySelector()</code>, and all matched elements\u2019 text contents are extracted into a list:</p> <pre><code>tags: _[list[str], '[data-item=\"tag\"]']\n# \u27f6 ['Category A', 'Category B']\n</code></pre> <p>If You Want to Extract from the Container Itself</p> <p>Set the selector to <code>None</code> and use an attribute name or other instruction:</p> <pre><code>id: _[str, None, 'data-id']\n</code></pre>"},{"location":"docs/web-crawler/#webextractor-constants","title":"\ud83e\uddf1 WebExtractor Constants","text":"<p>Your custom WebExtractor can set these config values:</p> <p>Required:</p> <ul> <li><code>BASE_URL</code>: Starting point for crawling</li> <li><code>PAGE_CONTENT_SELECTOR</code>: The main content selector</li> </ul> <p>Optional:</p> <ul> <li><code>BROWSER_TYPE</code>: Choose browser type (default is <code>EDGE_HEADLESS</code>)</li> <li><code>TRAIL_SLASH</code>: Add a trailing slash to URLs (default <code>False</code>)</li> <li><code>WAIT_FOR_SELECTOR</code>: Wait for this selector to appear before scraping</li> <li><code>CLICK_TEXT</code>: Auto-click this button (e.g. cookie popup) before scraping</li> <li><code>SCROLL</code>: Scroll the page to load dynamic content (default <code>False</code>)</li> </ul> <p>For structured details:</p> <ul> <li><code>DETAILS</code>: Your custom <code>WebDetails</code> class; or</li> <li><code>JSON_DETAILS</code>: or JS code to extract data from JSON blobs on the page</li> </ul>"},{"location":"docs/web-crawler/#scraping-json-data-from-web-pages","title":"\ud83d\udce6 Scraping JSON Data From Web Pages","text":"<p>Some websites store content as embedded JSON inside <code>&lt;script&gt;</code> tags.</p> <p>You can extract it using JavaScript instead of HTML selectors:</p> app/data/extractors/my_website_web_extractor.py<pre><code>class MyWebsiteWebExtractor(WebExtractor):\n    BASE_URL = 'https://mywebsite.com'\n    PAGE_CONTENT_SELECTOR = 'main'\n    JSON_DETAILS = 'JSON.stringify(JSON.parse(document.querySelector(\"script#__DATA__\").textContent).props.articles)'\n\n    async def crawlTechArticles(self):\n        return await self.crawlSpecificDetailsJSON(['/category/tech'])\n</code></pre> <p>Use <code>crawlSpecificDetailsJSON()</code> instead of <code>crawlSpecificDetails()</code> when using JSON extraction.</p>"},{"location":"docs/web-crawler/#get-raw-html-or-a-parsed-html-document","title":"\ud83e\uddfe Get Raw HTML or a Parsed HTML Document","text":"<p>Arkalos can fetch the raw HTML or a parsed document using <code>HTMLDocumentParser</code>.</p> notebooks/crawl.ipynb<pre><code>html = await extractor.getPageHTML(url)\ndoc = await extractor.getPageHTMLDoc(url)\n</code></pre> <p>The <code>doc</code> object has many useful properties:</p> <pre><code>doc.url\ndoc.baseURL\ndoc.domain\ndoc.path\ndoc.charset\ndoc.title\ndoc.meta\ndoc.metaProps\ndoc.links\ndoc.pageLinks\ndoc.internalPageLinks\ndoc.externalPageLinks\ndoc.cleanHTML\ndoc.contentHTML\ndoc.markdown\n</code></pre> <p>You can import <code>HTMLDocumentParser</code> from:</p> <pre><code>from arkalos.utils.html_utils import HTMLDocumentParser\n</code></pre> <p>It uses BeautifulSoup4 (with lxml) and markdownify for conversion to clean Markdown.</p>"},{"location":"docs/workflows/","title":"Workflows","text":"<p>Workflows are structured sequences of steps or processes that automate tasks. They are something between a script and a package.</p> <p>Often, when you start working with data pipelines or automation, you begin by writing scripts and notebooks. However, you may find yourself copying and adapting code for different use cases repeatedly. Workflows help by organizing these repetitive tasks into reusable components.</p> <p>A workflow acts as a controller that brings together multiple modules and data, executing them in a specific order.</p>"},{"location":"docs/workflows/#creating-a-workflow","title":"Creating a Workflow","text":"<p>To create a new workflow, add a new file and class inside the <code>app/workflows/...</code> directory. Implement the <code>Workflow</code> contract (interface), which requires a <code>run()</code> method.</p> <p>Let's say we need a simple workflow with two steps:</p> app/workflows/processes/my_workflow.py<pre><code>from arkalos.workflows.workflow import Workflow\n\nclass MyWorkflow(Workflow):\n\n    def step1(self):\n        print(\"Running step 1 of My Process...\")\n\n    def step2(self):\n        print(\"Running step 2 of My Process...\")\n\n    def run(self):\n        self.step1()\n        self.step2()\n</code></pre> <p>Now, this workflow can be reused across different scripts and notebooks:</p> scripts/my_workflow.py<pre><code>from app.workflows.processes.my_workflow import MyWorkflow\n\nwf = MyWorkflow()\nwf.run()\n</code></pre> <p>Run the script using:</p> <pre><code>uv run scripts/my_workflow.py\n</code></pre>"},{"location":"docs/workflows/#etlworkflow","title":"ETLWorkflow","text":"<p>ETL stands for Extract, Transform, and Load \u2014 a common pattern in data pipelines. Arkalos includes an <code>ETLWorkflow</code> that simplifies data extraction and loading into a configured data warehouse.</p> <p>To use it, provide an extractor class as the first argument:</p> scripts/etl/sync_airtable_dwh.py<pre><code>from arkalos.data.extractors.airtable_extractor import AirtableExtractor\nfrom arkalos.workflows.etl_workflow import ETLWorkflow\n\nwf = ETLWorkflow(AirtableExtractor)\nwf.run(drop_tables=True)\n</code></pre> <p>The <code>run()</code> method accepts parameters such as <code>drop_tables=True</code>, which ensures data is refreshed on every run.</p> <p>Note</p> <p>Currently, we recommend dropping tables in your warehouse since Arkalos is in development. This ensures data is always in sync but is not ideal for handling large datasets.</p> <p>Optionally, you can specify a data warehouse class as a second argument:</p> scripts/etl/my_custom_etl.py<pre><code>from arkalos.data.extractors.airtable_extractor import AirtableExtractor\nfrom arkalos.data.warehouse.sqlite.sqlite_warehouse import SQLiteWarehouse\n\nwf = ETLWorkflow(\n    AirtableExtractor,\n    SQLiteWarehouse\n)\nwf.run(drop_tables=True)\n</code></pre> <p>You can also create your own extractor and warehouse implementation. See the Working with Data guide for more details.</p>"},{"location":"docs/workflows/#whats-next","title":"What\u2019s Next?","text":"<p>Now that you understand workflows, continue to the Utils section to learn about utility functions and helpers.</p>"}]}